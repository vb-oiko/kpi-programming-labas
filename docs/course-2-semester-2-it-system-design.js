/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/highlight.js/styles/github.css":
/*!*******************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/highlight.js/styles/github.css ***!
  \*******************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__);\n// Imports\n\nvar ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default()(function(i){return i[1]});\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"/*\\n\\ngithub.com style (c) Vasily Polovnyov <vast@whiteants.net>\\n\\n*/\\n\\n.hljs {\\n  display: block;\\n  overflow-x: auto;\\n  padding: 0.5em;\\n  color: #333;\\n  background: #f8f8f8;\\n}\\n\\n.hljs-comment,\\n.hljs-quote {\\n  color: #998;\\n  font-style: italic;\\n}\\n\\n.hljs-keyword,\\n.hljs-selector-tag,\\n.hljs-subst {\\n  color: #333;\\n  font-weight: bold;\\n}\\n\\n.hljs-number,\\n.hljs-literal,\\n.hljs-variable,\\n.hljs-template-variable,\\n.hljs-tag .hljs-attr {\\n  color: #008080;\\n}\\n\\n.hljs-string,\\n.hljs-doctag {\\n  color: #d14;\\n}\\n\\n.hljs-title,\\n.hljs-section,\\n.hljs-selector-id {\\n  color: #900;\\n  font-weight: bold;\\n}\\n\\n.hljs-subst {\\n  font-weight: normal;\\n}\\n\\n.hljs-type,\\n.hljs-class .hljs-title {\\n  color: #458;\\n  font-weight: bold;\\n}\\n\\n.hljs-tag,\\n.hljs-name,\\n.hljs-attribute {\\n  color: #000080;\\n  font-weight: normal;\\n}\\n\\n.hljs-regexp,\\n.hljs-link {\\n  color: #009926;\\n}\\n\\n.hljs-symbol,\\n.hljs-bullet {\\n  color: #990073;\\n}\\n\\n.hljs-built_in,\\n.hljs-builtin-name {\\n  color: #0086b3;\\n}\\n\\n.hljs-meta {\\n  color: #999;\\n  font-weight: bold;\\n}\\n\\n.hljs-deletion {\\n  background: #fdd;\\n}\\n\\n.hljs-addition {\\n  background: #dfd;\\n}\\n\\n.hljs-emphasis {\\n  font-style: italic;\\n}\\n\\n.hljs-strong {\\n  font-weight: bold;\\n}\\n\", \"\"]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://test/./node_modules/highlight.js/styles/github.css?./node_modules/css-loader/dist/cjs.js");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/style.css":
/*!*************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/style.css ***!
  \*************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__);\n// Imports\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default()(function(i){return i[1]});\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"body {\\n  margin-left: 2cm;\\n  font-size: 14pt;\\n  line-height: 21pt;\\n  width: 600px;\\n  font-family: \\\"Times New Roman\\\", Times, serif;\\n}\\n\\nimg {\\n  width: 100%;\\n}\\n\\nh1,\\nh2,\\nh3 {\\n  font-size: 14pt;\\n}\\n\\nh1 {\\n  text-align: center;\\n}\\n\\n.flowchart,\\nh2,\\nh3 {\\n  text-align: left;\\n  margin-block-start: 2rem;\\n}\\n\\n.avoid-page-break-after {\\n  page-break-after: avoid;\\n}\\n\\n.page-break-before {\\n  page-break-before: always;\\n}\\n\\npre,\\nblockquote {\\n  page-break-inside: avoid;\\n}\\n\\n.align-center {\\n  text-align: center;\\n}\\n\", \"\"]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://test/./src/style.css?./node_modules/css-loader/dist/cjs.js");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (cssWithMappingToString) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item);\n\n      if (item[2]) {\n        return \"@media \".concat(item[2], \" {\").concat(content, \"}\");\n      }\n\n      return content;\n    }).join(\"\");\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === \"string\") {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, \"\"]];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = \"\".concat(mediaQuery, \" and \").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};\n\n//# sourceURL=webpack://test/./node_modules/css-loader/dist/runtime/api.js?");

/***/ }),

/***/ "./node_modules/highlight.js/lib/core.js":
/*!***********************************************!*\
  !*** ./node_modules/highlight.js/lib/core.js ***!
  \***********************************************/
/***/ ((module) => {

eval("function deepFreeze(obj) {\n    if (obj instanceof Map) {\n        obj.clear = obj.delete = obj.set = function () {\n            throw new Error('map is read-only');\n        };\n    } else if (obj instanceof Set) {\n        obj.add = obj.clear = obj.delete = function () {\n            throw new Error('set is read-only');\n        };\n    }\n\n    // Freeze self\n    Object.freeze(obj);\n\n    Object.getOwnPropertyNames(obj).forEach(function (name) {\n        var prop = obj[name];\n\n        // Freeze prop if it is an object\n        if (typeof prop == 'object' && !Object.isFrozen(prop)) {\n            deepFreeze(prop);\n        }\n    });\n\n    return obj;\n}\n\nvar deepFreezeEs6 = deepFreeze;\nvar _default = deepFreeze;\ndeepFreezeEs6.default = _default;\n\n/** @implements CallbackResponse */\nclass Response {\n  /**\n   * @param {CompiledMode} mode\n   */\n  constructor(mode) {\n    // eslint-disable-next-line no-undefined\n    if (mode.data === undefined) mode.data = {};\n\n    this.data = mode.data;\n    this.isMatchIgnored = false;\n  }\n\n  ignoreMatch() {\n    this.isMatchIgnored = true;\n  }\n}\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction escapeHTML(value) {\n  return value\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#x27;');\n}\n\n/**\n * performs a shallow merge of multiple objects into one\n *\n * @template T\n * @param {T} original\n * @param {Record<string,any>[]} objects\n * @returns {T} a single new object\n */\nfunction inherit(original, ...objects) {\n  /** @type Record<string,any> */\n  const result = Object.create(null);\n\n  for (const key in original) {\n    result[key] = original[key];\n  }\n  objects.forEach(function(obj) {\n    for (const key in obj) {\n      result[key] = obj[key];\n    }\n  });\n  return /** @type {T} */ (result);\n}\n\n/**\n * @typedef {object} Renderer\n * @property {(text: string) => void} addText\n * @property {(node: Node) => void} openNode\n * @property {(node: Node) => void} closeNode\n * @property {() => string} value\n */\n\n/** @typedef {{kind?: string, sublanguage?: boolean}} Node */\n/** @typedef {{walk: (r: Renderer) => void}} Tree */\n/** */\n\nconst SPAN_CLOSE = '</span>';\n\n/**\n * Determines if a node needs to be wrapped in <span>\n *\n * @param {Node} node */\nconst emitsWrappingTags = (node) => {\n  return !!node.kind;\n};\n\n/** @type {Renderer} */\nclass HTMLRenderer {\n  /**\n   * Creates a new HTMLRenderer\n   *\n   * @param {Tree} parseTree - the parse tree (must support `walk` API)\n   * @param {{classPrefix: string}} options\n   */\n  constructor(parseTree, options) {\n    this.buffer = \"\";\n    this.classPrefix = options.classPrefix;\n    parseTree.walk(this);\n  }\n\n  /**\n   * Adds texts to the output stream\n   *\n   * @param {string} text */\n  addText(text) {\n    this.buffer += escapeHTML(text);\n  }\n\n  /**\n   * Adds a node open to the output stream (if needed)\n   *\n   * @param {Node} node */\n  openNode(node) {\n    if (!emitsWrappingTags(node)) return;\n\n    let className = node.kind;\n    if (!node.sublanguage) {\n      className = `${this.classPrefix}${className}`;\n    }\n    this.span(className);\n  }\n\n  /**\n   * Adds a node close to the output stream (if needed)\n   *\n   * @param {Node} node */\n  closeNode(node) {\n    if (!emitsWrappingTags(node)) return;\n\n    this.buffer += SPAN_CLOSE;\n  }\n\n  /**\n   * returns the accumulated buffer\n  */\n  value() {\n    return this.buffer;\n  }\n\n  // helpers\n\n  /**\n   * Builds a span element\n   *\n   * @param {string} className */\n  span(className) {\n    this.buffer += `<span class=\"${className}\">`;\n  }\n}\n\n/** @typedef {{kind?: string, sublanguage?: boolean, children: Node[]} | string} Node */\n/** @typedef {{kind?: string, sublanguage?: boolean, children: Node[]} } DataNode */\n/**  */\n\nclass TokenTree {\n  constructor() {\n    /** @type DataNode */\n    this.rootNode = { children: [] };\n    this.stack = [this.rootNode];\n  }\n\n  get top() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  get root() { return this.rootNode; }\n\n  /** @param {Node} node */\n  add(node) {\n    this.top.children.push(node);\n  }\n\n  /** @param {string} kind */\n  openNode(kind) {\n    /** @type Node */\n    const node = { kind, children: [] };\n    this.add(node);\n    this.stack.push(node);\n  }\n\n  closeNode() {\n    if (this.stack.length > 1) {\n      return this.stack.pop();\n    }\n    // eslint-disable-next-line no-undefined\n    return undefined;\n  }\n\n  closeAllNodes() {\n    while (this.closeNode());\n  }\n\n  toJSON() {\n    return JSON.stringify(this.rootNode, null, 4);\n  }\n\n  /**\n   * @typedef { import(\"./html_renderer\").Renderer } Renderer\n   * @param {Renderer} builder\n   */\n  walk(builder) {\n    // this does not\n    return this.constructor._walk(builder, this.rootNode);\n    // this works\n    // return TokenTree._walk(builder, this.rootNode);\n  }\n\n  /**\n   * @param {Renderer} builder\n   * @param {Node} node\n   */\n  static _walk(builder, node) {\n    if (typeof node === \"string\") {\n      builder.addText(node);\n    } else if (node.children) {\n      builder.openNode(node);\n      node.children.forEach((child) => this._walk(builder, child));\n      builder.closeNode(node);\n    }\n    return builder;\n  }\n\n  /**\n   * @param {Node} node\n   */\n  static _collapse(node) {\n    if (typeof node === \"string\") return;\n    if (!node.children) return;\n\n    if (node.children.every(el => typeof el === \"string\")) {\n      // node.text = node.children.join(\"\");\n      // delete node.children;\n      node.children = [node.children.join(\"\")];\n    } else {\n      node.children.forEach((child) => {\n        TokenTree._collapse(child);\n      });\n    }\n  }\n}\n\n/**\n  Currently this is all private API, but this is the minimal API necessary\n  that an Emitter must implement to fully support the parser.\n\n  Minimal interface:\n\n  - addKeyword(text, kind)\n  - addText(text)\n  - addSublanguage(emitter, subLanguageName)\n  - finalize()\n  - openNode(kind)\n  - closeNode()\n  - closeAllNodes()\n  - toHTML()\n\n*/\n\n/**\n * @implements {Emitter}\n */\nclass TokenTreeEmitter extends TokenTree {\n  /**\n   * @param {*} options\n   */\n  constructor(options) {\n    super();\n    this.options = options;\n  }\n\n  /**\n   * @param {string} text\n   * @param {string} kind\n   */\n  addKeyword(text, kind) {\n    if (text === \"\") { return; }\n\n    this.openNode(kind);\n    this.addText(text);\n    this.closeNode();\n  }\n\n  /**\n   * @param {string} text\n   */\n  addText(text) {\n    if (text === \"\") { return; }\n\n    this.add(text);\n  }\n\n  /**\n   * @param {Emitter & {root: DataNode}} emitter\n   * @param {string} name\n   */\n  addSublanguage(emitter, name) {\n    /** @type DataNode */\n    const node = emitter.root;\n    node.kind = name;\n    node.sublanguage = true;\n    this.add(node);\n  }\n\n  toHTML() {\n    const renderer = new HTMLRenderer(this, this.options);\n    return renderer.value();\n  }\n\n  finalize() {\n    return true;\n  }\n}\n\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\nfunction escape(value) {\n  return new RegExp(value.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'm');\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */\nfunction either(...args) {\n  const joined = '(' + args.map((x) => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n\n/**\n * @param {RegExp} re\n * @returns {number}\n */\nfunction countMatchGroups(re) {\n  return (new RegExp(re.toString() + '|')).exec('').length - 1;\n}\n\n/**\n * Does lexeme start with a regular expression match at the beginning\n * @param {RegExp} re\n * @param {string} lexeme\n */\nfunction startsWith(re, lexeme) {\n  const match = re && re.exec(lexeme);\n  return match && match.index === 0;\n}\n\n// BACKREF_RE matches an open parenthesis or backreference. To avoid\n// an incorrect parse, it additionally matches the following:\n// - [...] elements, where the meaning of parentheses and escapes change\n// - other escape sequences, so we do not misparse escape sequences as\n//   interesting elements\n// - non-matching or lookahead parentheses, which do not capture. These\n//   follow the '(' with a '?'.\nconst BACKREF_RE = /\\[(?:[^\\\\\\]]|\\\\.)*\\]|\\(\\??|\\\\([1-9][0-9]*)|\\\\./;\n\n// join logically computes regexps.join(separator), but fixes the\n// backreferences so they continue to match.\n// it also places each individual regular expression into it's own\n// match group, keeping track of the sequencing of those match groups\n// is currently an exercise for the caller. :-)\n/**\n * @param {(string | RegExp)[]} regexps\n * @param {string} separator\n * @returns {string}\n */\nfunction join(regexps, separator = \"|\") {\n  let numCaptures = 0;\n\n  return regexps.map((regex) => {\n    numCaptures += 1;\n    const offset = numCaptures;\n    let re = source(regex);\n    let out = '';\n\n    while (re.length > 0) {\n      const match = BACKREF_RE.exec(re);\n      if (!match) {\n        out += re;\n        break;\n      }\n      out += re.substring(0, match.index);\n      re = re.substring(match.index + match[0].length);\n      if (match[0][0] === '\\\\' && match[1]) {\n        // Adjust the backreference.\n        out += '\\\\' + String(Number(match[1]) + offset);\n      } else {\n        out += match[0];\n        if (match[0] === '(') {\n          numCaptures++;\n        }\n      }\n    }\n    return out;\n  }).map(re => `(${re})`).join(separator);\n}\n\n// Common regexps\nconst MATCH_NOTHING_RE = /\\b\\B/;\nconst IDENT_RE = '[a-zA-Z]\\\\w*';\nconst UNDERSCORE_IDENT_RE = '[a-zA-Z_]\\\\w*';\nconst NUMBER_RE = '\\\\b\\\\d+(\\\\.\\\\d+)?';\nconst C_NUMBER_RE = '(-?)(\\\\b0[xX][a-fA-F0-9]+|(\\\\b\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][-+]?\\\\d+)?)'; // 0x..., 0..., decimal, float\nconst BINARY_NUMBER_RE = '\\\\b(0b[01]+)'; // 0b...\nconst RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\\\*|\\\\*=|\\\\+|\\\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\\\?|\\\\[|\\\\{|\\\\(|\\\\^|\\\\^=|\\\\||\\\\|=|\\\\|\\\\||~';\n\n/**\n* @param { Partial<Mode> & {binary?: string | RegExp} } opts\n*/\nconst SHEBANG = (opts = {}) => {\n  const beginShebang = /^#![ ]*\\//;\n  if (opts.binary) {\n    opts.begin = concat(\n      beginShebang,\n      /.*\\b/,\n      opts.binary,\n      /\\b.*/);\n  }\n  return inherit({\n    className: 'meta',\n    begin: beginShebang,\n    end: /$/,\n    relevance: 0,\n    /** @type {ModeCallback} */\n    \"on:begin\": (m, resp) => {\n      if (m.index !== 0) resp.ignoreMatch();\n    }\n  }, opts);\n};\n\n// Common modes\nconst BACKSLASH_ESCAPE = {\n  begin: '\\\\\\\\[\\\\s\\\\S]', relevance: 0\n};\nconst APOS_STRING_MODE = {\n  className: 'string',\n  begin: '\\'',\n  end: '\\'',\n  illegal: '\\\\n',\n  contains: [BACKSLASH_ESCAPE]\n};\nconst QUOTE_STRING_MODE = {\n  className: 'string',\n  begin: '\"',\n  end: '\"',\n  illegal: '\\\\n',\n  contains: [BACKSLASH_ESCAPE]\n};\nconst PHRASAL_WORDS_MODE = {\n  begin: /\\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\\b/\n};\n/**\n * Creates a comment mode\n *\n * @param {string | RegExp} begin\n * @param {string | RegExp} end\n * @param {Mode | {}} [modeOptions]\n * @returns {Partial<Mode>}\n */\nconst COMMENT = function(begin, end, modeOptions = {}) {\n  const mode = inherit(\n    {\n      className: 'comment',\n      begin,\n      end,\n      contains: []\n    },\n    modeOptions\n  );\n  mode.contains.push(PHRASAL_WORDS_MODE);\n  mode.contains.push({\n    className: 'doctag',\n    begin: '(?:TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):',\n    relevance: 0\n  });\n  return mode;\n};\nconst C_LINE_COMMENT_MODE = COMMENT('//', '$');\nconst C_BLOCK_COMMENT_MODE = COMMENT('/\\\\*', '\\\\*/');\nconst HASH_COMMENT_MODE = COMMENT('#', '$');\nconst NUMBER_MODE = {\n  className: 'number',\n  begin: NUMBER_RE,\n  relevance: 0\n};\nconst C_NUMBER_MODE = {\n  className: 'number',\n  begin: C_NUMBER_RE,\n  relevance: 0\n};\nconst BINARY_NUMBER_MODE = {\n  className: 'number',\n  begin: BINARY_NUMBER_RE,\n  relevance: 0\n};\nconst CSS_NUMBER_MODE = {\n  className: 'number',\n  begin: NUMBER_RE + '(' +\n    '%|em|ex|ch|rem' +\n    '|vw|vh|vmin|vmax' +\n    '|cm|mm|in|pt|pc|px' +\n    '|deg|grad|rad|turn' +\n    '|s|ms' +\n    '|Hz|kHz' +\n    '|dpi|dpcm|dppx' +\n    ')?',\n  relevance: 0\n};\nconst REGEXP_MODE = {\n  // this outer rule makes sure we actually have a WHOLE regex and not simply\n  // an expression such as:\n  //\n  //     3 / something\n  //\n  // (which will then blow up when regex's `illegal` sees the newline)\n  begin: /(?=\\/[^/\\n]*\\/)/,\n  contains: [{\n    className: 'regexp',\n    begin: /\\//,\n    end: /\\/[gimuy]*/,\n    illegal: /\\n/,\n    contains: [\n      BACKSLASH_ESCAPE,\n      {\n        begin: /\\[/,\n        end: /\\]/,\n        relevance: 0,\n        contains: [BACKSLASH_ESCAPE]\n      }\n    ]\n  }]\n};\nconst TITLE_MODE = {\n  className: 'title',\n  begin: IDENT_RE,\n  relevance: 0\n};\nconst UNDERSCORE_TITLE_MODE = {\n  className: 'title',\n  begin: UNDERSCORE_IDENT_RE,\n  relevance: 0\n};\nconst METHOD_GUARD = {\n  // excludes method names from keyword processing\n  begin: '\\\\.\\\\s*' + UNDERSCORE_IDENT_RE,\n  relevance: 0\n};\n\n/**\n * Adds end same as begin mechanics to a mode\n *\n * Your mode must include at least a single () match group as that first match\n * group is what is used for comparison\n * @param {Partial<Mode>} mode\n */\nconst END_SAME_AS_BEGIN = function(mode) {\n  return Object.assign(mode,\n    {\n      /** @type {ModeCallback} */\n      'on:begin': (m, resp) => { resp.data._beginMatch = m[1]; },\n      /** @type {ModeCallback} */\n      'on:end': (m, resp) => { if (resp.data._beginMatch !== m[1]) resp.ignoreMatch(); }\n    });\n};\n\nvar MODES = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    MATCH_NOTHING_RE: MATCH_NOTHING_RE,\n    IDENT_RE: IDENT_RE,\n    UNDERSCORE_IDENT_RE: UNDERSCORE_IDENT_RE,\n    NUMBER_RE: NUMBER_RE,\n    C_NUMBER_RE: C_NUMBER_RE,\n    BINARY_NUMBER_RE: BINARY_NUMBER_RE,\n    RE_STARTERS_RE: RE_STARTERS_RE,\n    SHEBANG: SHEBANG,\n    BACKSLASH_ESCAPE: BACKSLASH_ESCAPE,\n    APOS_STRING_MODE: APOS_STRING_MODE,\n    QUOTE_STRING_MODE: QUOTE_STRING_MODE,\n    PHRASAL_WORDS_MODE: PHRASAL_WORDS_MODE,\n    COMMENT: COMMENT,\n    C_LINE_COMMENT_MODE: C_LINE_COMMENT_MODE,\n    C_BLOCK_COMMENT_MODE: C_BLOCK_COMMENT_MODE,\n    HASH_COMMENT_MODE: HASH_COMMENT_MODE,\n    NUMBER_MODE: NUMBER_MODE,\n    C_NUMBER_MODE: C_NUMBER_MODE,\n    BINARY_NUMBER_MODE: BINARY_NUMBER_MODE,\n    CSS_NUMBER_MODE: CSS_NUMBER_MODE,\n    REGEXP_MODE: REGEXP_MODE,\n    TITLE_MODE: TITLE_MODE,\n    UNDERSCORE_TITLE_MODE: UNDERSCORE_TITLE_MODE,\n    METHOD_GUARD: METHOD_GUARD,\n    END_SAME_AS_BEGIN: END_SAME_AS_BEGIN\n});\n\n// Grammar extensions / plugins\n// See: https://github.com/highlightjs/highlight.js/issues/2833\n\n// Grammar extensions allow \"syntactic sugar\" to be added to the grammar modes\n// without requiring any underlying changes to the compiler internals.\n\n// `compileMatch` being the perfect small example of now allowing a grammar\n// author to write `match` when they desire to match a single expression rather\n// than being forced to use `begin`.  The extension then just moves `match` into\n// `begin` when it runs.  Ie, no features have been added, but we've just made\n// the experience of writing (and reading grammars) a little bit nicer.\n\n// ------\n\n// TODO: We need negative look-behind support to do this properly\n/**\n * Skip a match if it has a preceding dot\n *\n * This is used for `beginKeywords` to prevent matching expressions such as\n * `bob.keyword.do()`. The mode compiler automatically wires this up as a\n * special _internal_ 'on:begin' callback for modes with `beginKeywords`\n * @param {RegExpMatchArray} match\n * @param {CallbackResponse} response\n */\nfunction skipIfhasPrecedingDot(match, response) {\n  const before = match.input[match.index - 1];\n  if (before === \".\") {\n    response.ignoreMatch();\n  }\n}\n\n\n/**\n * `beginKeywords` syntactic sugar\n * @type {CompilerExt}\n */\nfunction beginKeywords(mode, parent) {\n  if (!parent) return;\n  if (!mode.beginKeywords) return;\n\n  // for languages with keywords that include non-word characters checking for\n  // a word boundary is not sufficient, so instead we check for a word boundary\n  // or whitespace - this does no harm in any case since our keyword engine\n  // doesn't allow spaces in keywords anyways and we still check for the boundary\n  // first\n  mode.begin = '\\\\b(' + mode.beginKeywords.split(' ').join('|') + ')(?!\\\\.)(?=\\\\b|\\\\s)';\n  mode.__beforeBegin = skipIfhasPrecedingDot;\n  mode.keywords = mode.keywords || mode.beginKeywords;\n  delete mode.beginKeywords;\n\n  // prevents double relevance, the keywords themselves provide\n  // relevance, the mode doesn't need to double it\n  // eslint-disable-next-line no-undefined\n  if (mode.relevance === undefined) mode.relevance = 0;\n}\n\n/**\n * Allow `illegal` to contain an array of illegal values\n * @type {CompilerExt}\n */\nfunction compileIllegal(mode, _parent) {\n  if (!Array.isArray(mode.illegal)) return;\n\n  mode.illegal = either(...mode.illegal);\n}\n\n/**\n * `match` to match a single expression for readability\n * @type {CompilerExt}\n */\nfunction compileMatch(mode, _parent) {\n  if (!mode.match) return;\n  if (mode.begin || mode.end) throw new Error(\"begin & end are not supported with match\");\n\n  mode.begin = mode.match;\n  delete mode.match;\n}\n\n/**\n * provides the default 1 relevance to all modes\n * @type {CompilerExt}\n */\nfunction compileRelevance(mode, _parent) {\n  // eslint-disable-next-line no-undefined\n  if (mode.relevance === undefined) mode.relevance = 1;\n}\n\n// keywords that should have no default relevance value\nconst COMMON_KEYWORDS = [\n  'of',\n  'and',\n  'for',\n  'in',\n  'not',\n  'or',\n  'if',\n  'then',\n  'parent', // common variable name\n  'list', // common variable name\n  'value' // common variable name\n];\n\nconst DEFAULT_KEYWORD_CLASSNAME = \"keyword\";\n\n/**\n * Given raw keywords from a language definition, compile them.\n *\n * @param {string | Record<string,string|string[]> | Array<string>} rawKeywords\n * @param {boolean} caseInsensitive\n */\nfunction compileKeywords(rawKeywords, caseInsensitive, className = DEFAULT_KEYWORD_CLASSNAME) {\n  /** @type KeywordDict */\n  const compiledKeywords = {};\n\n  // input can be a string of keywords, an array of keywords, or a object with\n  // named keys representing className (which can then point to a string or array)\n  if (typeof rawKeywords === 'string') {\n    compileList(className, rawKeywords.split(\" \"));\n  } else if (Array.isArray(rawKeywords)) {\n    compileList(className, rawKeywords);\n  } else {\n    Object.keys(rawKeywords).forEach(function(className) {\n      // collapse all our objects back into the parent object\n      Object.assign(\n        compiledKeywords,\n        compileKeywords(rawKeywords[className], caseInsensitive, className)\n      );\n    });\n  }\n  return compiledKeywords;\n\n  // ---\n\n  /**\n   * Compiles an individual list of keywords\n   *\n   * Ex: \"for if when while|5\"\n   *\n   * @param {string} className\n   * @param {Array<string>} keywordList\n   */\n  function compileList(className, keywordList) {\n    if (caseInsensitive) {\n      keywordList = keywordList.map(x => x.toLowerCase());\n    }\n    keywordList.forEach(function(keyword) {\n      const pair = keyword.split('|');\n      compiledKeywords[pair[0]] = [className, scoreForKeyword(pair[0], pair[1])];\n    });\n  }\n}\n\n/**\n * Returns the proper score for a given keyword\n *\n * Also takes into account comment keywords, which will be scored 0 UNLESS\n * another score has been manually assigned.\n * @param {string} keyword\n * @param {string} [providedScore]\n */\nfunction scoreForKeyword(keyword, providedScore) {\n  // manual scores always win over common keywords\n  // so you can force a score of 1 if you really insist\n  if (providedScore) {\n    return Number(providedScore);\n  }\n\n  return commonKeyword(keyword) ? 0 : 1;\n}\n\n/**\n * Determines if a given keyword is common or not\n *\n * @param {string} keyword */\nfunction commonKeyword(keyword) {\n  return COMMON_KEYWORDS.includes(keyword.toLowerCase());\n}\n\n// compilation\n\n/**\n * Compiles a language definition result\n *\n * Given the raw result of a language definition (Language), compiles this so\n * that it is ready for highlighting code.\n * @param {Language} language\n * @param {{plugins: HLJSPlugin[]}} opts\n * @returns {CompiledLanguage}\n */\nfunction compileLanguage(language, { plugins }) {\n  /**\n   * Builds a regex with the case sensativility of the current language\n   *\n   * @param {RegExp | string} value\n   * @param {boolean} [global]\n   */\n  function langRe(value, global) {\n    return new RegExp(\n      source(value),\n      'm' + (language.case_insensitive ? 'i' : '') + (global ? 'g' : '')\n    );\n  }\n\n  /**\n    Stores multiple regular expressions and allows you to quickly search for\n    them all in a string simultaneously - returning the first match.  It does\n    this by creating a huge (a|b|c) regex - each individual item wrapped with ()\n    and joined by `|` - using match groups to track position.  When a match is\n    found checking which position in the array has content allows us to figure\n    out which of the original regexes / match groups triggered the match.\n\n    The match object itself (the result of `Regex.exec`) is returned but also\n    enhanced by merging in any meta-data that was registered with the regex.\n    This is how we keep track of which mode matched, and what type of rule\n    (`illegal`, `begin`, end, etc).\n  */\n  class MultiRegex {\n    constructor() {\n      this.matchIndexes = {};\n      // @ts-ignore\n      this.regexes = [];\n      this.matchAt = 1;\n      this.position = 0;\n    }\n\n    // @ts-ignore\n    addRule(re, opts) {\n      opts.position = this.position++;\n      // @ts-ignore\n      this.matchIndexes[this.matchAt] = opts;\n      this.regexes.push([opts, re]);\n      this.matchAt += countMatchGroups(re) + 1;\n    }\n\n    compile() {\n      if (this.regexes.length === 0) {\n        // avoids the need to check length every time exec is called\n        // @ts-ignore\n        this.exec = () => null;\n      }\n      const terminators = this.regexes.map(el => el[1]);\n      this.matcherRe = langRe(join(terminators), true);\n      this.lastIndex = 0;\n    }\n\n    /** @param {string} s */\n    exec(s) {\n      this.matcherRe.lastIndex = this.lastIndex;\n      const match = this.matcherRe.exec(s);\n      if (!match) { return null; }\n\n      // eslint-disable-next-line no-undefined\n      const i = match.findIndex((el, i) => i > 0 && el !== undefined);\n      // @ts-ignore\n      const matchData = this.matchIndexes[i];\n      // trim off any earlier non-relevant match groups (ie, the other regex\n      // match groups that make up the multi-matcher)\n      match.splice(0, i);\n\n      return Object.assign(match, matchData);\n    }\n  }\n\n  /*\n    Created to solve the key deficiently with MultiRegex - there is no way to\n    test for multiple matches at a single location.  Why would we need to do\n    that?  In the future a more dynamic engine will allow certain matches to be\n    ignored.  An example: if we matched say the 3rd regex in a large group but\n    decided to ignore it - we'd need to started testing again at the 4th\n    regex... but MultiRegex itself gives us no real way to do that.\n\n    So what this class creates MultiRegexs on the fly for whatever search\n    position they are needed.\n\n    NOTE: These additional MultiRegex objects are created dynamically.  For most\n    grammars most of the time we will never actually need anything more than the\n    first MultiRegex - so this shouldn't have too much overhead.\n\n    Say this is our search group, and we match regex3, but wish to ignore it.\n\n      regex1 | regex2 | regex3 | regex4 | regex5    ' ie, startAt = 0\n\n    What we need is a new MultiRegex that only includes the remaining\n    possibilities:\n\n      regex4 | regex5                               ' ie, startAt = 3\n\n    This class wraps all that complexity up in a simple API... `startAt` decides\n    where in the array of expressions to start doing the matching. It\n    auto-increments, so if a match is found at position 2, then startAt will be\n    set to 3.  If the end is reached startAt will return to 0.\n\n    MOST of the time the parser will be setting startAt manually to 0.\n  */\n  class ResumableMultiRegex {\n    constructor() {\n      // @ts-ignore\n      this.rules = [];\n      // @ts-ignore\n      this.multiRegexes = [];\n      this.count = 0;\n\n      this.lastIndex = 0;\n      this.regexIndex = 0;\n    }\n\n    // @ts-ignore\n    getMatcher(index) {\n      if (this.multiRegexes[index]) return this.multiRegexes[index];\n\n      const matcher = new MultiRegex();\n      this.rules.slice(index).forEach(([re, opts]) => matcher.addRule(re, opts));\n      matcher.compile();\n      this.multiRegexes[index] = matcher;\n      return matcher;\n    }\n\n    resumingScanAtSamePosition() {\n      return this.regexIndex !== 0;\n    }\n\n    considerAll() {\n      this.regexIndex = 0;\n    }\n\n    // @ts-ignore\n    addRule(re, opts) {\n      this.rules.push([re, opts]);\n      if (opts.type === \"begin\") this.count++;\n    }\n\n    /** @param {string} s */\n    exec(s) {\n      const m = this.getMatcher(this.regexIndex);\n      m.lastIndex = this.lastIndex;\n      let result = m.exec(s);\n\n      // The following is because we have no easy way to say \"resume scanning at the\n      // existing position but also skip the current rule ONLY\". What happens is\n      // all prior rules are also skipped which can result in matching the wrong\n      // thing. Example of matching \"booger\":\n\n      // our matcher is [string, \"booger\", number]\n      //\n      // ....booger....\n\n      // if \"booger\" is ignored then we'd really need a regex to scan from the\n      // SAME position for only: [string, number] but ignoring \"booger\" (if it\n      // was the first match), a simple resume would scan ahead who knows how\n      // far looking only for \"number\", ignoring potential string matches (or\n      // future \"booger\" matches that might be valid.)\n\n      // So what we do: We execute two matchers, one resuming at the same\n      // position, but the second full matcher starting at the position after:\n\n      //     /--- resume first regex match here (for [number])\n      //     |/---- full match here for [string, \"booger\", number]\n      //     vv\n      // ....booger....\n\n      // Which ever results in a match first is then used. So this 3-4 step\n      // process essentially allows us to say \"match at this position, excluding\n      // a prior rule that was ignored\".\n      //\n      // 1. Match \"booger\" first, ignore. Also proves that [string] does non match.\n      // 2. Resume matching for [number]\n      // 3. Match at index + 1 for [string, \"booger\", number]\n      // 4. If #2 and #3 result in matches, which came first?\n      if (this.resumingScanAtSamePosition()) {\n        if (result && result.index === this.lastIndex) ; else { // use the second matcher result\n          const m2 = this.getMatcher(0);\n          m2.lastIndex = this.lastIndex + 1;\n          result = m2.exec(s);\n        }\n      }\n\n      if (result) {\n        this.regexIndex += result.position + 1;\n        if (this.regexIndex === this.count) {\n          // wrap-around to considering all matches again\n          this.considerAll();\n        }\n      }\n\n      return result;\n    }\n  }\n\n  /**\n   * Given a mode, builds a huge ResumableMultiRegex that can be used to walk\n   * the content and find matches.\n   *\n   * @param {CompiledMode} mode\n   * @returns {ResumableMultiRegex}\n   */\n  function buildModeRegex(mode) {\n    const mm = new ResumableMultiRegex();\n\n    mode.contains.forEach(term => mm.addRule(term.begin, { rule: term, type: \"begin\" }));\n\n    if (mode.terminatorEnd) {\n      mm.addRule(mode.terminatorEnd, { type: \"end\" });\n    }\n    if (mode.illegal) {\n      mm.addRule(mode.illegal, { type: \"illegal\" });\n    }\n\n    return mm;\n  }\n\n  /** skip vs abort vs ignore\n   *\n   * @skip   - The mode is still entered and exited normally (and contains rules apply),\n   *           but all content is held and added to the parent buffer rather than being\n   *           output when the mode ends.  Mostly used with `sublanguage` to build up\n   *           a single large buffer than can be parsed by sublanguage.\n   *\n   *             - The mode begin ands ends normally.\n   *             - Content matched is added to the parent mode buffer.\n   *             - The parser cursor is moved forward normally.\n   *\n   * @abort  - A hack placeholder until we have ignore.  Aborts the mode (as if it\n   *           never matched) but DOES NOT continue to match subsequent `contains`\n   *           modes.  Abort is bad/suboptimal because it can result in modes\n   *           farther down not getting applied because an earlier rule eats the\n   *           content but then aborts.\n   *\n   *             - The mode does not begin.\n   *             - Content matched by `begin` is added to the mode buffer.\n   *             - The parser cursor is moved forward accordingly.\n   *\n   * @ignore - Ignores the mode (as if it never matched) and continues to match any\n   *           subsequent `contains` modes.  Ignore isn't technically possible with\n   *           the current parser implementation.\n   *\n   *             - The mode does not begin.\n   *             - Content matched by `begin` is ignored.\n   *             - The parser cursor is not moved forward.\n   */\n\n  /**\n   * Compiles an individual mode\n   *\n   * This can raise an error if the mode contains certain detectable known logic\n   * issues.\n   * @param {Mode} mode\n   * @param {CompiledMode | null} [parent]\n   * @returns {CompiledMode | never}\n   */\n  function compileMode(mode, parent) {\n    const cmode = /** @type CompiledMode */ (mode);\n    if (mode.isCompiled) return cmode;\n\n    [\n      // do this early so compiler extensions generally don't have to worry about\n      // the distinction between match/begin\n      compileMatch\n    ].forEach(ext => ext(mode, parent));\n\n    language.compilerExtensions.forEach(ext => ext(mode, parent));\n\n    // __beforeBegin is considered private API, internal use only\n    mode.__beforeBegin = null;\n\n    [\n      beginKeywords,\n      // do this later so compiler extensions that come earlier have access to the\n      // raw array if they wanted to perhaps manipulate it, etc.\n      compileIllegal,\n      // default to 1 relevance if not specified\n      compileRelevance\n    ].forEach(ext => ext(mode, parent));\n\n    mode.isCompiled = true;\n\n    let keywordPattern = null;\n    if (typeof mode.keywords === \"object\") {\n      keywordPattern = mode.keywords.$pattern;\n      delete mode.keywords.$pattern;\n    }\n\n    if (mode.keywords) {\n      mode.keywords = compileKeywords(mode.keywords, language.case_insensitive);\n    }\n\n    // both are not allowed\n    if (mode.lexemes && keywordPattern) {\n      throw new Error(\"ERR: Prefer `keywords.$pattern` to `mode.lexemes`, BOTH are not allowed. (see mode reference) \");\n    }\n\n    // `mode.lexemes` was the old standard before we added and now recommend\n    // using `keywords.$pattern` to pass the keyword pattern\n    keywordPattern = keywordPattern || mode.lexemes || /\\w+/;\n    cmode.keywordPatternRe = langRe(keywordPattern, true);\n\n    if (parent) {\n      if (!mode.begin) mode.begin = /\\B|\\b/;\n      cmode.beginRe = langRe(mode.begin);\n      if (mode.endSameAsBegin) mode.end = mode.begin;\n      if (!mode.end && !mode.endsWithParent) mode.end = /\\B|\\b/;\n      if (mode.end) cmode.endRe = langRe(mode.end);\n      cmode.terminatorEnd = source(mode.end) || '';\n      if (mode.endsWithParent && parent.terminatorEnd) {\n        cmode.terminatorEnd += (mode.end ? '|' : '') + parent.terminatorEnd;\n      }\n    }\n    if (mode.illegal) cmode.illegalRe = langRe(/** @type {RegExp | string} */ (mode.illegal));\n    if (!mode.contains) mode.contains = [];\n\n    mode.contains = [].concat(...mode.contains.map(function(c) {\n      return expandOrCloneMode(c === 'self' ? mode : c);\n    }));\n    mode.contains.forEach(function(c) { compileMode(/** @type Mode */ (c), cmode); });\n\n    if (mode.starts) {\n      compileMode(mode.starts, parent);\n    }\n\n    cmode.matcher = buildModeRegex(cmode);\n    return cmode;\n  }\n\n  if (!language.compilerExtensions) language.compilerExtensions = [];\n\n  // self is not valid at the top-level\n  if (language.contains && language.contains.includes('self')) {\n    throw new Error(\"ERR: contains `self` is not supported at the top-level of a language.  See documentation.\");\n  }\n\n  // we need a null object, which inherit will guarantee\n  language.classNameAliases = inherit(language.classNameAliases || {});\n\n  return compileMode(/** @type Mode */ (language));\n}\n\n/**\n * Determines if a mode has a dependency on it's parent or not\n *\n * If a mode does have a parent dependency then often we need to clone it if\n * it's used in multiple places so that each copy points to the correct parent,\n * where-as modes without a parent can often safely be re-used at the bottom of\n * a mode chain.\n *\n * @param {Mode | null} mode\n * @returns {boolean} - is there a dependency on the parent?\n * */\nfunction dependencyOnParent(mode) {\n  if (!mode) return false;\n\n  return mode.endsWithParent || dependencyOnParent(mode.starts);\n}\n\n/**\n * Expands a mode or clones it if necessary\n *\n * This is necessary for modes with parental dependenceis (see notes on\n * `dependencyOnParent`) and for nodes that have `variants` - which must then be\n * exploded into their own individual modes at compile time.\n *\n * @param {Mode} mode\n * @returns {Mode | Mode[]}\n * */\nfunction expandOrCloneMode(mode) {\n  if (mode.variants && !mode.cachedVariants) {\n    mode.cachedVariants = mode.variants.map(function(variant) {\n      return inherit(mode, { variants: null }, variant);\n    });\n  }\n\n  // EXPAND\n  // if we have variants then essentially \"replace\" the mode with the variants\n  // this happens in compileMode, where this function is called from\n  if (mode.cachedVariants) {\n    return mode.cachedVariants;\n  }\n\n  // CLONE\n  // if we have dependencies on parents then we need a unique\n  // instance of ourselves, so we can be reused with many\n  // different parents without issue\n  if (dependencyOnParent(mode)) {\n    return inherit(mode, { starts: mode.starts ? inherit(mode.starts) : null });\n  }\n\n  if (Object.isFrozen(mode)) {\n    return inherit(mode);\n  }\n\n  // no special dependency issues, just return ourselves\n  return mode;\n}\n\nvar version = \"10.7.3\";\n\n// @ts-nocheck\n\nfunction hasValueOrEmptyAttribute(value) {\n  return Boolean(value || value === \"\");\n}\n\nfunction BuildVuePlugin(hljs) {\n  const Component = {\n    props: [\"language\", \"code\", \"autodetect\"],\n    data: function() {\n      return {\n        detectedLanguage: \"\",\n        unknownLanguage: false\n      };\n    },\n    computed: {\n      className() {\n        if (this.unknownLanguage) return \"\";\n\n        return \"hljs \" + this.detectedLanguage;\n      },\n      highlighted() {\n        // no idea what language to use, return raw code\n        if (!this.autoDetect && !hljs.getLanguage(this.language)) {\n          console.warn(`The language \"${this.language}\" you specified could not be found.`);\n          this.unknownLanguage = true;\n          return escapeHTML(this.code);\n        }\n\n        let result = {};\n        if (this.autoDetect) {\n          result = hljs.highlightAuto(this.code);\n          this.detectedLanguage = result.language;\n        } else {\n          result = hljs.highlight(this.language, this.code, this.ignoreIllegals);\n          this.detectedLanguage = this.language;\n        }\n        return result.value;\n      },\n      autoDetect() {\n        return !this.language || hasValueOrEmptyAttribute(this.autodetect);\n      },\n      ignoreIllegals() {\n        return true;\n      }\n    },\n    // this avoids needing to use a whole Vue compilation pipeline just\n    // to build Highlight.js\n    render(createElement) {\n      return createElement(\"pre\", {}, [\n        createElement(\"code\", {\n          class: this.className,\n          domProps: { innerHTML: this.highlighted }\n        })\n      ]);\n    }\n    // template: `<pre><code :class=\"className\" v-html=\"highlighted\"></code></pre>`\n  };\n\n  const VuePlugin = {\n    install(Vue) {\n      Vue.component('highlightjs', Component);\n    }\n  };\n\n  return { Component, VuePlugin };\n}\n\n/* plugin itself */\n\n/** @type {HLJSPlugin} */\nconst mergeHTMLPlugin = {\n  \"after:highlightElement\": ({ el, result, text }) => {\n    const originalStream = nodeStream(el);\n    if (!originalStream.length) return;\n\n    const resultNode = document.createElement('div');\n    resultNode.innerHTML = result.value;\n    result.value = mergeStreams(originalStream, nodeStream(resultNode), text);\n  }\n};\n\n/* Stream merging support functions */\n\n/**\n * @typedef Event\n * @property {'start'|'stop'} event\n * @property {number} offset\n * @property {Node} node\n */\n\n/**\n * @param {Node} node\n */\nfunction tag(node) {\n  return node.nodeName.toLowerCase();\n}\n\n/**\n * @param {Node} node\n */\nfunction nodeStream(node) {\n  /** @type Event[] */\n  const result = [];\n  (function _nodeStream(node, offset) {\n    for (let child = node.firstChild; child; child = child.nextSibling) {\n      if (child.nodeType === 3) {\n        offset += child.nodeValue.length;\n      } else if (child.nodeType === 1) {\n        result.push({\n          event: 'start',\n          offset: offset,\n          node: child\n        });\n        offset = _nodeStream(child, offset);\n        // Prevent void elements from having an end tag that would actually\n        // double them in the output. There are more void elements in HTML\n        // but we list only those realistically expected in code display.\n        if (!tag(child).match(/br|hr|img|input/)) {\n          result.push({\n            event: 'stop',\n            offset: offset,\n            node: child\n          });\n        }\n      }\n    }\n    return offset;\n  })(node, 0);\n  return result;\n}\n\n/**\n * @param {any} original - the original stream\n * @param {any} highlighted - stream of the highlighted source\n * @param {string} value - the original source itself\n */\nfunction mergeStreams(original, highlighted, value) {\n  let processed = 0;\n  let result = '';\n  const nodeStack = [];\n\n  function selectStream() {\n    if (!original.length || !highlighted.length) {\n      return original.length ? original : highlighted;\n    }\n    if (original[0].offset !== highlighted[0].offset) {\n      return (original[0].offset < highlighted[0].offset) ? original : highlighted;\n    }\n\n    /*\n    To avoid starting the stream just before it should stop the order is\n    ensured that original always starts first and closes last:\n\n    if (event1 == 'start' && event2 == 'start')\n      return original;\n    if (event1 == 'start' && event2 == 'stop')\n      return highlighted;\n    if (event1 == 'stop' && event2 == 'start')\n      return original;\n    if (event1 == 'stop' && event2 == 'stop')\n      return highlighted;\n\n    ... which is collapsed to:\n    */\n    return highlighted[0].event === 'start' ? original : highlighted;\n  }\n\n  /**\n   * @param {Node} node\n   */\n  function open(node) {\n    /** @param {Attr} attr */\n    function attributeString(attr) {\n      return ' ' + attr.nodeName + '=\"' + escapeHTML(attr.value) + '\"';\n    }\n    // @ts-ignore\n    result += '<' + tag(node) + [].map.call(node.attributes, attributeString).join('') + '>';\n  }\n\n  /**\n   * @param {Node} node\n   */\n  function close(node) {\n    result += '</' + tag(node) + '>';\n  }\n\n  /**\n   * @param {Event} event\n   */\n  function render(event) {\n    (event.event === 'start' ? open : close)(event.node);\n  }\n\n  while (original.length || highlighted.length) {\n    let stream = selectStream();\n    result += escapeHTML(value.substring(processed, stream[0].offset));\n    processed = stream[0].offset;\n    if (stream === original) {\n      /*\n      On any opening or closing tag of the original markup we first close\n      the entire highlighted node stack, then render the original tag along\n      with all the following original tags at the same offset and then\n      reopen all the tags on the highlighted stack.\n      */\n      nodeStack.reverse().forEach(close);\n      do {\n        render(stream.splice(0, 1)[0]);\n        stream = selectStream();\n      } while (stream === original && stream.length && stream[0].offset === processed);\n      nodeStack.reverse().forEach(open);\n    } else {\n      if (stream[0].event === 'start') {\n        nodeStack.push(stream[0].node);\n      } else {\n        nodeStack.pop();\n      }\n      render(stream.splice(0, 1)[0]);\n    }\n  }\n  return result + escapeHTML(value.substr(processed));\n}\n\n/*\n\nFor the reasoning behind this please see:\nhttps://github.com/highlightjs/highlight.js/issues/2880#issuecomment-747275419\n\n*/\n\n/**\n * @type {Record<string, boolean>}\n */\nconst seenDeprecations = {};\n\n/**\n * @param {string} message\n */\nconst error = (message) => {\n  console.error(message);\n};\n\n/**\n * @param {string} message\n * @param {any} args\n */\nconst warn = (message, ...args) => {\n  console.log(`WARN: ${message}`, ...args);\n};\n\n/**\n * @param {string} version\n * @param {string} message\n */\nconst deprecated = (version, message) => {\n  if (seenDeprecations[`${version}/${message}`]) return;\n\n  console.log(`Deprecated as of ${version}. ${message}`);\n  seenDeprecations[`${version}/${message}`] = true;\n};\n\n/*\nSyntax highlighting with language autodetection.\nhttps://highlightjs.org/\n*/\n\nconst escape$1 = escapeHTML;\nconst inherit$1 = inherit;\nconst NO_MATCH = Symbol(\"nomatch\");\n\n/**\n * @param {any} hljs - object that is extended (legacy)\n * @returns {HLJSApi}\n */\nconst HLJS = function(hljs) {\n  // Global internal variables used within the highlight.js library.\n  /** @type {Record<string, Language>} */\n  const languages = Object.create(null);\n  /** @type {Record<string, string>} */\n  const aliases = Object.create(null);\n  /** @type {HLJSPlugin[]} */\n  const plugins = [];\n\n  // safe/production mode - swallows more errors, tries to keep running\n  // even if a single syntax or parse hits a fatal error\n  let SAFE_MODE = true;\n  const fixMarkupRe = /(^(<[^>]+>|\\t|)+|\\n)/gm;\n  const LANGUAGE_NOT_FOUND = \"Could not find the language '{}', did you forget to load/include a language module?\";\n  /** @type {Language} */\n  const PLAINTEXT_LANGUAGE = { disableAutodetect: true, name: 'Plain text', contains: [] };\n\n  // Global options used when within external APIs. This is modified when\n  // calling the `hljs.configure` function.\n  /** @type HLJSOptions */\n  let options = {\n    noHighlightRe: /^(no-?highlight)$/i,\n    languageDetectRe: /\\blang(?:uage)?-([\\w-]+)\\b/i,\n    classPrefix: 'hljs-',\n    tabReplace: null,\n    useBR: false,\n    languages: null,\n    // beta configuration options, subject to change, welcome to discuss\n    // https://github.com/highlightjs/highlight.js/issues/1086\n    __emitter: TokenTreeEmitter\n  };\n\n  /* Utility functions */\n\n  /**\n   * Tests a language name to see if highlighting should be skipped\n   * @param {string} languageName\n   */\n  function shouldNotHighlight(languageName) {\n    return options.noHighlightRe.test(languageName);\n  }\n\n  /**\n   * @param {HighlightedHTMLElement} block - the HTML element to determine language for\n   */\n  function blockLanguage(block) {\n    let classes = block.className + ' ';\n\n    classes += block.parentNode ? block.parentNode.className : '';\n\n    // language-* takes precedence over non-prefixed class names.\n    const match = options.languageDetectRe.exec(classes);\n    if (match) {\n      const language = getLanguage(match[1]);\n      if (!language) {\n        warn(LANGUAGE_NOT_FOUND.replace(\"{}\", match[1]));\n        warn(\"Falling back to no-highlight mode for this block.\", block);\n      }\n      return language ? match[1] : 'no-highlight';\n    }\n\n    return classes\n      .split(/\\s+/)\n      .find((_class) => shouldNotHighlight(_class) || getLanguage(_class));\n  }\n\n  /**\n   * Core highlighting function.\n   *\n   * OLD API\n   * highlight(lang, code, ignoreIllegals, continuation)\n   *\n   * NEW API\n   * highlight(code, {lang, ignoreIllegals})\n   *\n   * @param {string} codeOrlanguageName - the language to use for highlighting\n   * @param {string | HighlightOptions} optionsOrCode - the code to highlight\n   * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail\n   * @param {CompiledMode} [continuation] - current continuation mode, if any\n   *\n   * @returns {HighlightResult} Result - an object that represents the result\n   * @property {string} language - the language name\n   * @property {number} relevance - the relevance score\n   * @property {string} value - the highlighted HTML code\n   * @property {string} code - the original raw code\n   * @property {CompiledMode} top - top of the current mode stack\n   * @property {boolean} illegal - indicates whether any illegal matches were found\n  */\n  function highlight(codeOrlanguageName, optionsOrCode, ignoreIllegals, continuation) {\n    let code = \"\";\n    let languageName = \"\";\n    if (typeof optionsOrCode === \"object\") {\n      code = codeOrlanguageName;\n      ignoreIllegals = optionsOrCode.ignoreIllegals;\n      languageName = optionsOrCode.language;\n      // continuation not supported at all via the new API\n      // eslint-disable-next-line no-undefined\n      continuation = undefined;\n    } else {\n      // old API\n      deprecated(\"10.7.0\", \"highlight(lang, code, ...args) has been deprecated.\");\n      deprecated(\"10.7.0\", \"Please use highlight(code, options) instead.\\nhttps://github.com/highlightjs/highlight.js/issues/2277\");\n      languageName = codeOrlanguageName;\n      code = optionsOrCode;\n    }\n\n    /** @type {BeforeHighlightContext} */\n    const context = {\n      code,\n      language: languageName\n    };\n    // the plugin can change the desired language or the code to be highlighted\n    // just be changing the object it was passed\n    fire(\"before:highlight\", context);\n\n    // a before plugin can usurp the result completely by providing it's own\n    // in which case we don't even need to call highlight\n    const result = context.result\n      ? context.result\n      : _highlight(context.language, context.code, ignoreIllegals, continuation);\n\n    result.code = context.code;\n    // the plugin can change anything in result to suite it\n    fire(\"after:highlight\", result);\n\n    return result;\n  }\n\n  /**\n   * private highlight that's used internally and does not fire callbacks\n   *\n   * @param {string} languageName - the language to use for highlighting\n   * @param {string} codeToHighlight - the code to highlight\n   * @param {boolean?} [ignoreIllegals] - whether to ignore illegal matches, default is to bail\n   * @param {CompiledMode?} [continuation] - current continuation mode, if any\n   * @returns {HighlightResult} - result of the highlight operation\n  */\n  function _highlight(languageName, codeToHighlight, ignoreIllegals, continuation) {\n    /**\n     * Return keyword data if a match is a keyword\n     * @param {CompiledMode} mode - current mode\n     * @param {RegExpMatchArray} match - regexp match data\n     * @returns {KeywordData | false}\n     */\n    function keywordData(mode, match) {\n      const matchText = language.case_insensitive ? match[0].toLowerCase() : match[0];\n      return Object.prototype.hasOwnProperty.call(mode.keywords, matchText) && mode.keywords[matchText];\n    }\n\n    function processKeywords() {\n      if (!top.keywords) {\n        emitter.addText(modeBuffer);\n        return;\n      }\n\n      let lastIndex = 0;\n      top.keywordPatternRe.lastIndex = 0;\n      let match = top.keywordPatternRe.exec(modeBuffer);\n      let buf = \"\";\n\n      while (match) {\n        buf += modeBuffer.substring(lastIndex, match.index);\n        const data = keywordData(top, match);\n        if (data) {\n          const [kind, keywordRelevance] = data;\n          emitter.addText(buf);\n          buf = \"\";\n\n          relevance += keywordRelevance;\n          if (kind.startsWith(\"_\")) {\n            // _ implied for relevance only, do not highlight\n            // by applying a class name\n            buf += match[0];\n          } else {\n            const cssClass = language.classNameAliases[kind] || kind;\n            emitter.addKeyword(match[0], cssClass);\n          }\n        } else {\n          buf += match[0];\n        }\n        lastIndex = top.keywordPatternRe.lastIndex;\n        match = top.keywordPatternRe.exec(modeBuffer);\n      }\n      buf += modeBuffer.substr(lastIndex);\n      emitter.addText(buf);\n    }\n\n    function processSubLanguage() {\n      if (modeBuffer === \"\") return;\n      /** @type HighlightResult */\n      let result = null;\n\n      if (typeof top.subLanguage === 'string') {\n        if (!languages[top.subLanguage]) {\n          emitter.addText(modeBuffer);\n          return;\n        }\n        result = _highlight(top.subLanguage, modeBuffer, true, continuations[top.subLanguage]);\n        continuations[top.subLanguage] = /** @type {CompiledMode} */ (result.top);\n      } else {\n        result = highlightAuto(modeBuffer, top.subLanguage.length ? top.subLanguage : null);\n      }\n\n      // Counting embedded language score towards the host language may be disabled\n      // with zeroing the containing mode relevance. Use case in point is Markdown that\n      // allows XML everywhere and makes every XML snippet to have a much larger Markdown\n      // score.\n      if (top.relevance > 0) {\n        relevance += result.relevance;\n      }\n      emitter.addSublanguage(result.emitter, result.language);\n    }\n\n    function processBuffer() {\n      if (top.subLanguage != null) {\n        processSubLanguage();\n      } else {\n        processKeywords();\n      }\n      modeBuffer = '';\n    }\n\n    /**\n     * @param {Mode} mode - new mode to start\n     */\n    function startNewMode(mode) {\n      if (mode.className) {\n        emitter.openNode(language.classNameAliases[mode.className] || mode.className);\n      }\n      top = Object.create(mode, { parent: { value: top } });\n      return top;\n    }\n\n    /**\n     * @param {CompiledMode } mode - the mode to potentially end\n     * @param {RegExpMatchArray} match - the latest match\n     * @param {string} matchPlusRemainder - match plus remainder of content\n     * @returns {CompiledMode | void} - the next mode, or if void continue on in current mode\n     */\n    function endOfMode(mode, match, matchPlusRemainder) {\n      let matched = startsWith(mode.endRe, matchPlusRemainder);\n\n      if (matched) {\n        if (mode[\"on:end\"]) {\n          const resp = new Response(mode);\n          mode[\"on:end\"](match, resp);\n          if (resp.isMatchIgnored) matched = false;\n        }\n\n        if (matched) {\n          while (mode.endsParent && mode.parent) {\n            mode = mode.parent;\n          }\n          return mode;\n        }\n      }\n      // even if on:end fires an `ignore` it's still possible\n      // that we might trigger the end node because of a parent mode\n      if (mode.endsWithParent) {\n        return endOfMode(mode.parent, match, matchPlusRemainder);\n      }\n    }\n\n    /**\n     * Handle matching but then ignoring a sequence of text\n     *\n     * @param {string} lexeme - string containing full match text\n     */\n    function doIgnore(lexeme) {\n      if (top.matcher.regexIndex === 0) {\n        // no more regexs to potentially match here, so we move the cursor forward one\n        // space\n        modeBuffer += lexeme[0];\n        return 1;\n      } else {\n        // no need to move the cursor, we still have additional regexes to try and\n        // match at this very spot\n        resumeScanAtSamePosition = true;\n        return 0;\n      }\n    }\n\n    /**\n     * Handle the start of a new potential mode match\n     *\n     * @param {EnhancedMatch} match - the current match\n     * @returns {number} how far to advance the parse cursor\n     */\n    function doBeginMatch(match) {\n      const lexeme = match[0];\n      const newMode = match.rule;\n\n      const resp = new Response(newMode);\n      // first internal before callbacks, then the public ones\n      const beforeCallbacks = [newMode.__beforeBegin, newMode[\"on:begin\"]];\n      for (const cb of beforeCallbacks) {\n        if (!cb) continue;\n        cb(match, resp);\n        if (resp.isMatchIgnored) return doIgnore(lexeme);\n      }\n\n      if (newMode && newMode.endSameAsBegin) {\n        newMode.endRe = escape(lexeme);\n      }\n\n      if (newMode.skip) {\n        modeBuffer += lexeme;\n      } else {\n        if (newMode.excludeBegin) {\n          modeBuffer += lexeme;\n        }\n        processBuffer();\n        if (!newMode.returnBegin && !newMode.excludeBegin) {\n          modeBuffer = lexeme;\n        }\n      }\n      startNewMode(newMode);\n      // if (mode[\"after:begin\"]) {\n      //   let resp = new Response(mode);\n      //   mode[\"after:begin\"](match, resp);\n      // }\n      return newMode.returnBegin ? 0 : lexeme.length;\n    }\n\n    /**\n     * Handle the potential end of mode\n     *\n     * @param {RegExpMatchArray} match - the current match\n     */\n    function doEndMatch(match) {\n      const lexeme = match[0];\n      const matchPlusRemainder = codeToHighlight.substr(match.index);\n\n      const endMode = endOfMode(top, match, matchPlusRemainder);\n      if (!endMode) { return NO_MATCH; }\n\n      const origin = top;\n      if (origin.skip) {\n        modeBuffer += lexeme;\n      } else {\n        if (!(origin.returnEnd || origin.excludeEnd)) {\n          modeBuffer += lexeme;\n        }\n        processBuffer();\n        if (origin.excludeEnd) {\n          modeBuffer = lexeme;\n        }\n      }\n      do {\n        if (top.className) {\n          emitter.closeNode();\n        }\n        if (!top.skip && !top.subLanguage) {\n          relevance += top.relevance;\n        }\n        top = top.parent;\n      } while (top !== endMode.parent);\n      if (endMode.starts) {\n        if (endMode.endSameAsBegin) {\n          endMode.starts.endRe = endMode.endRe;\n        }\n        startNewMode(endMode.starts);\n      }\n      return origin.returnEnd ? 0 : lexeme.length;\n    }\n\n    function processContinuations() {\n      const list = [];\n      for (let current = top; current !== language; current = current.parent) {\n        if (current.className) {\n          list.unshift(current.className);\n        }\n      }\n      list.forEach(item => emitter.openNode(item));\n    }\n\n    /** @type {{type?: MatchType, index?: number, rule?: Mode}}} */\n    let lastMatch = {};\n\n    /**\n     *  Process an individual match\n     *\n     * @param {string} textBeforeMatch - text preceeding the match (since the last match)\n     * @param {EnhancedMatch} [match] - the match itself\n     */\n    function processLexeme(textBeforeMatch, match) {\n      const lexeme = match && match[0];\n\n      // add non-matched text to the current mode buffer\n      modeBuffer += textBeforeMatch;\n\n      if (lexeme == null) {\n        processBuffer();\n        return 0;\n      }\n\n      // we've found a 0 width match and we're stuck, so we need to advance\n      // this happens when we have badly behaved rules that have optional matchers to the degree that\n      // sometimes they can end up matching nothing at all\n      // Ref: https://github.com/highlightjs/highlight.js/issues/2140\n      if (lastMatch.type === \"begin\" && match.type === \"end\" && lastMatch.index === match.index && lexeme === \"\") {\n        // spit the \"skipped\" character that our regex choked on back into the output sequence\n        modeBuffer += codeToHighlight.slice(match.index, match.index + 1);\n        if (!SAFE_MODE) {\n          /** @type {AnnotatedError} */\n          const err = new Error('0 width match regex');\n          err.languageName = languageName;\n          err.badRule = lastMatch.rule;\n          throw err;\n        }\n        return 1;\n      }\n      lastMatch = match;\n\n      if (match.type === \"begin\") {\n        return doBeginMatch(match);\n      } else if (match.type === \"illegal\" && !ignoreIllegals) {\n        // illegal match, we do not continue processing\n        /** @type {AnnotatedError} */\n        const err = new Error('Illegal lexeme \"' + lexeme + '\" for mode \"' + (top.className || '<unnamed>') + '\"');\n        err.mode = top;\n        throw err;\n      } else if (match.type === \"end\") {\n        const processed = doEndMatch(match);\n        if (processed !== NO_MATCH) {\n          return processed;\n        }\n      }\n\n      // edge case for when illegal matches $ (end of line) which is technically\n      // a 0 width match but not a begin/end match so it's not caught by the\n      // first handler (when ignoreIllegals is true)\n      if (match.type === \"illegal\" && lexeme === \"\") {\n        // advance so we aren't stuck in an infinite loop\n        return 1;\n      }\n\n      // infinite loops are BAD, this is a last ditch catch all. if we have a\n      // decent number of iterations yet our index (cursor position in our\n      // parsing) still 3x behind our index then something is very wrong\n      // so we bail\n      if (iterations > 100000 && iterations > match.index * 3) {\n        const err = new Error('potential infinite loop, way more iterations than matches');\n        throw err;\n      }\n\n      /*\n      Why might be find ourselves here?  Only one occasion now.  An end match that was\n      triggered but could not be completed.  When might this happen?  When an `endSameasBegin`\n      rule sets the end rule to a specific match.  Since the overall mode termination rule that's\n      being used to scan the text isn't recompiled that means that any match that LOOKS like\n      the end (but is not, because it is not an exact match to the beginning) will\n      end up here.  A definite end match, but when `doEndMatch` tries to \"reapply\"\n      the end rule and fails to match, we wind up here, and just silently ignore the end.\n\n      This causes no real harm other than stopping a few times too many.\n      */\n\n      modeBuffer += lexeme;\n      return lexeme.length;\n    }\n\n    const language = getLanguage(languageName);\n    if (!language) {\n      error(LANGUAGE_NOT_FOUND.replace(\"{}\", languageName));\n      throw new Error('Unknown language: \"' + languageName + '\"');\n    }\n\n    const md = compileLanguage(language, { plugins });\n    let result = '';\n    /** @type {CompiledMode} */\n    let top = continuation || md;\n    /** @type Record<string,CompiledMode> */\n    const continuations = {}; // keep continuations for sub-languages\n    const emitter = new options.__emitter(options);\n    processContinuations();\n    let modeBuffer = '';\n    let relevance = 0;\n    let index = 0;\n    let iterations = 0;\n    let resumeScanAtSamePosition = false;\n\n    try {\n      top.matcher.considerAll();\n\n      for (;;) {\n        iterations++;\n        if (resumeScanAtSamePosition) {\n          // only regexes not matched previously will now be\n          // considered for a potential match\n          resumeScanAtSamePosition = false;\n        } else {\n          top.matcher.considerAll();\n        }\n        top.matcher.lastIndex = index;\n\n        const match = top.matcher.exec(codeToHighlight);\n        // console.log(\"match\", match[0], match.rule && match.rule.begin)\n\n        if (!match) break;\n\n        const beforeMatch = codeToHighlight.substring(index, match.index);\n        const processedCount = processLexeme(beforeMatch, match);\n        index = match.index + processedCount;\n      }\n      processLexeme(codeToHighlight.substr(index));\n      emitter.closeAllNodes();\n      emitter.finalize();\n      result = emitter.toHTML();\n\n      return {\n        // avoid possible breakage with v10 clients expecting\n        // this to always be an integer\n        relevance: Math.floor(relevance),\n        value: result,\n        language: languageName,\n        illegal: false,\n        emitter: emitter,\n        top: top\n      };\n    } catch (err) {\n      if (err.message && err.message.includes('Illegal')) {\n        return {\n          illegal: true,\n          illegalBy: {\n            msg: err.message,\n            context: codeToHighlight.slice(index - 100, index + 100),\n            mode: err.mode\n          },\n          sofar: result,\n          relevance: 0,\n          value: escape$1(codeToHighlight),\n          emitter: emitter\n        };\n      } else if (SAFE_MODE) {\n        return {\n          illegal: false,\n          relevance: 0,\n          value: escape$1(codeToHighlight),\n          emitter: emitter,\n          language: languageName,\n          top: top,\n          errorRaised: err\n        };\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * returns a valid highlight result, without actually doing any actual work,\n   * auto highlight starts with this and it's possible for small snippets that\n   * auto-detection may not find a better match\n   * @param {string} code\n   * @returns {HighlightResult}\n   */\n  function justTextHighlightResult(code) {\n    const result = {\n      relevance: 0,\n      emitter: new options.__emitter(options),\n      value: escape$1(code),\n      illegal: false,\n      top: PLAINTEXT_LANGUAGE\n    };\n    result.emitter.addText(code);\n    return result;\n  }\n\n  /**\n  Highlighting with language detection. Accepts a string with the code to\n  highlight. Returns an object with the following properties:\n\n  - language (detected language)\n  - relevance (int)\n  - value (an HTML string with highlighting markup)\n  - second_best (object with the same structure for second-best heuristically\n    detected language, may be absent)\n\n    @param {string} code\n    @param {Array<string>} [languageSubset]\n    @returns {AutoHighlightResult}\n  */\n  function highlightAuto(code, languageSubset) {\n    languageSubset = languageSubset || options.languages || Object.keys(languages);\n    const plaintext = justTextHighlightResult(code);\n\n    const results = languageSubset.filter(getLanguage).filter(autoDetection).map(name =>\n      _highlight(name, code, false)\n    );\n    results.unshift(plaintext); // plaintext is always an option\n\n    const sorted = results.sort((a, b) => {\n      // sort base on relevance\n      if (a.relevance !== b.relevance) return b.relevance - a.relevance;\n\n      // always award the tie to the base language\n      // ie if C++ and Arduino are tied, it's more likely to be C++\n      if (a.language && b.language) {\n        if (getLanguage(a.language).supersetOf === b.language) {\n          return 1;\n        } else if (getLanguage(b.language).supersetOf === a.language) {\n          return -1;\n        }\n      }\n\n      // otherwise say they are equal, which has the effect of sorting on\n      // relevance while preserving the original ordering - which is how ties\n      // have historically been settled, ie the language that comes first always\n      // wins in the case of a tie\n      return 0;\n    });\n\n    const [best, secondBest] = sorted;\n\n    /** @type {AutoHighlightResult} */\n    const result = best;\n    result.second_best = secondBest;\n\n    return result;\n  }\n\n  /**\n  Post-processing of the highlighted markup:\n\n  - replace TABs with something more useful\n  - replace real line-breaks with '<br>' for non-pre containers\n\n    @param {string} html\n    @returns {string}\n  */\n  function fixMarkup(html) {\n    if (!(options.tabReplace || options.useBR)) {\n      return html;\n    }\n\n    return html.replace(fixMarkupRe, match => {\n      if (match === '\\n') {\n        return options.useBR ? '<br>' : match;\n      } else if (options.tabReplace) {\n        return match.replace(/\\t/g, options.tabReplace);\n      }\n      return match;\n    });\n  }\n\n  /**\n   * Builds new class name for block given the language name\n   *\n   * @param {HTMLElement} element\n   * @param {string} [currentLang]\n   * @param {string} [resultLang]\n   */\n  function updateClassName(element, currentLang, resultLang) {\n    const language = currentLang ? aliases[currentLang] : resultLang;\n\n    element.classList.add(\"hljs\");\n    if (language) element.classList.add(language);\n  }\n\n  /** @type {HLJSPlugin} */\n  const brPlugin = {\n    \"before:highlightElement\": ({ el }) => {\n      if (options.useBR) {\n        el.innerHTML = el.innerHTML.replace(/\\n/g, '').replace(/<br[ /]*>/g, '\\n');\n      }\n    },\n    \"after:highlightElement\": ({ result }) => {\n      if (options.useBR) {\n        result.value = result.value.replace(/\\n/g, \"<br>\");\n      }\n    }\n  };\n\n  const TAB_REPLACE_RE = /^(<[^>]+>|\\t)+/gm;\n  /** @type {HLJSPlugin} */\n  const tabReplacePlugin = {\n    \"after:highlightElement\": ({ result }) => {\n      if (options.tabReplace) {\n        result.value = result.value.replace(TAB_REPLACE_RE, (m) =>\n          m.replace(/\\t/g, options.tabReplace)\n        );\n      }\n    }\n  };\n\n  /**\n   * Applies highlighting to a DOM node containing code. Accepts a DOM node and\n   * two optional parameters for fixMarkup.\n   *\n   * @param {HighlightedHTMLElement} element - the HTML element to highlight\n  */\n  function highlightElement(element) {\n    /** @type HTMLElement */\n    let node = null;\n    const language = blockLanguage(element);\n\n    if (shouldNotHighlight(language)) return;\n\n    // support for v10 API\n    fire(\"before:highlightElement\",\n      { el: element, language: language });\n\n    node = element;\n    const text = node.textContent;\n    const result = language ? highlight(text, { language, ignoreIllegals: true }) : highlightAuto(text);\n\n    // support for v10 API\n    fire(\"after:highlightElement\", { el: element, result, text });\n\n    element.innerHTML = result.value;\n    updateClassName(element, language, result.language);\n    element.result = {\n      language: result.language,\n      // TODO: remove with version 11.0\n      re: result.relevance,\n      relavance: result.relevance\n    };\n    if (result.second_best) {\n      element.second_best = {\n        language: result.second_best.language,\n        // TODO: remove with version 11.0\n        re: result.second_best.relevance,\n        relavance: result.second_best.relevance\n      };\n    }\n  }\n\n  /**\n   * Updates highlight.js global options with the passed options\n   *\n   * @param {Partial<HLJSOptions>} userOptions\n   */\n  function configure(userOptions) {\n    if (userOptions.useBR) {\n      deprecated(\"10.3.0\", \"'useBR' will be removed entirely in v11.0\");\n      deprecated(\"10.3.0\", \"Please see https://github.com/highlightjs/highlight.js/issues/2559\");\n    }\n    options = inherit$1(options, userOptions);\n  }\n\n  /**\n   * Highlights to all <pre><code> blocks on a page\n   *\n   * @type {Function & {called?: boolean}}\n   */\n  // TODO: remove v12, deprecated\n  const initHighlighting = () => {\n    if (initHighlighting.called) return;\n    initHighlighting.called = true;\n\n    deprecated(\"10.6.0\", \"initHighlighting() is deprecated.  Use highlightAll() instead.\");\n\n    const blocks = document.querySelectorAll('pre code');\n    blocks.forEach(highlightElement);\n  };\n\n  // Higlights all when DOMContentLoaded fires\n  // TODO: remove v12, deprecated\n  function initHighlightingOnLoad() {\n    deprecated(\"10.6.0\", \"initHighlightingOnLoad() is deprecated.  Use highlightAll() instead.\");\n    wantsHighlight = true;\n  }\n\n  let wantsHighlight = false;\n\n  /**\n   * auto-highlights all pre>code elements on the page\n   */\n  function highlightAll() {\n    // if we are called too early in the loading process\n    if (document.readyState === \"loading\") {\n      wantsHighlight = true;\n      return;\n    }\n\n    const blocks = document.querySelectorAll('pre code');\n    blocks.forEach(highlightElement);\n  }\n\n  function boot() {\n    // if a highlight was requested before DOM was loaded, do now\n    if (wantsHighlight) highlightAll();\n  }\n\n  // make sure we are in the browser environment\n  if (typeof window !== 'undefined' && window.addEventListener) {\n    window.addEventListener('DOMContentLoaded', boot, false);\n  }\n\n  /**\n   * Register a language grammar module\n   *\n   * @param {string} languageName\n   * @param {LanguageFn} languageDefinition\n   */\n  function registerLanguage(languageName, languageDefinition) {\n    let lang = null;\n    try {\n      lang = languageDefinition(hljs);\n    } catch (error$1) {\n      error(\"Language definition for '{}' could not be registered.\".replace(\"{}\", languageName));\n      // hard or soft error\n      if (!SAFE_MODE) { throw error$1; } else { error(error$1); }\n      // languages that have serious errors are replaced with essentially a\n      // \"plaintext\" stand-in so that the code blocks will still get normal\n      // css classes applied to them - and one bad language won't break the\n      // entire highlighter\n      lang = PLAINTEXT_LANGUAGE;\n    }\n    // give it a temporary name if it doesn't have one in the meta-data\n    if (!lang.name) lang.name = languageName;\n    languages[languageName] = lang;\n    lang.rawDefinition = languageDefinition.bind(null, hljs);\n\n    if (lang.aliases) {\n      registerAliases(lang.aliases, { languageName });\n    }\n  }\n\n  /**\n   * Remove a language grammar module\n   *\n   * @param {string} languageName\n   */\n  function unregisterLanguage(languageName) {\n    delete languages[languageName];\n    for (const alias of Object.keys(aliases)) {\n      if (aliases[alias] === languageName) {\n        delete aliases[alias];\n      }\n    }\n  }\n\n  /**\n   * @returns {string[]} List of language internal names\n   */\n  function listLanguages() {\n    return Object.keys(languages);\n  }\n\n  /**\n    intended usage: When one language truly requires another\n\n    Unlike `getLanguage`, this will throw when the requested language\n    is not available.\n\n    @param {string} name - name of the language to fetch/require\n    @returns {Language | never}\n  */\n  function requireLanguage(name) {\n    deprecated(\"10.4.0\", \"requireLanguage will be removed entirely in v11.\");\n    deprecated(\"10.4.0\", \"Please see https://github.com/highlightjs/highlight.js/pull/2844\");\n\n    const lang = getLanguage(name);\n    if (lang) { return lang; }\n\n    const err = new Error('The \\'{}\\' language is required, but not loaded.'.replace('{}', name));\n    throw err;\n  }\n\n  /**\n   * @param {string} name - name of the language to retrieve\n   * @returns {Language | undefined}\n   */\n  function getLanguage(name) {\n    name = (name || '').toLowerCase();\n    return languages[name] || languages[aliases[name]];\n  }\n\n  /**\n   *\n   * @param {string|string[]} aliasList - single alias or list of aliases\n   * @param {{languageName: string}} opts\n   */\n  function registerAliases(aliasList, { languageName }) {\n    if (typeof aliasList === 'string') {\n      aliasList = [aliasList];\n    }\n    aliasList.forEach(alias => { aliases[alias.toLowerCase()] = languageName; });\n  }\n\n  /**\n   * Determines if a given language has auto-detection enabled\n   * @param {string} name - name of the language\n   */\n  function autoDetection(name) {\n    const lang = getLanguage(name);\n    return lang && !lang.disableAutodetect;\n  }\n\n  /**\n   * Upgrades the old highlightBlock plugins to the new\n   * highlightElement API\n   * @param {HLJSPlugin} plugin\n   */\n  function upgradePluginAPI(plugin) {\n    // TODO: remove with v12\n    if (plugin[\"before:highlightBlock\"] && !plugin[\"before:highlightElement\"]) {\n      plugin[\"before:highlightElement\"] = (data) => {\n        plugin[\"before:highlightBlock\"](\n          Object.assign({ block: data.el }, data)\n        );\n      };\n    }\n    if (plugin[\"after:highlightBlock\"] && !plugin[\"after:highlightElement\"]) {\n      plugin[\"after:highlightElement\"] = (data) => {\n        plugin[\"after:highlightBlock\"](\n          Object.assign({ block: data.el }, data)\n        );\n      };\n    }\n  }\n\n  /**\n   * @param {HLJSPlugin} plugin\n   */\n  function addPlugin(plugin) {\n    upgradePluginAPI(plugin);\n    plugins.push(plugin);\n  }\n\n  /**\n   *\n   * @param {PluginEvent} event\n   * @param {any} args\n   */\n  function fire(event, args) {\n    const cb = event;\n    plugins.forEach(function(plugin) {\n      if (plugin[cb]) {\n        plugin[cb](args);\n      }\n    });\n  }\n\n  /**\n  Note: fixMarkup is deprecated and will be removed entirely in v11\n\n  @param {string} arg\n  @returns {string}\n  */\n  function deprecateFixMarkup(arg) {\n    deprecated(\"10.2.0\", \"fixMarkup will be removed entirely in v11.0\");\n    deprecated(\"10.2.0\", \"Please see https://github.com/highlightjs/highlight.js/issues/2534\");\n\n    return fixMarkup(arg);\n  }\n\n  /**\n   *\n   * @param {HighlightedHTMLElement} el\n   */\n  function deprecateHighlightBlock(el) {\n    deprecated(\"10.7.0\", \"highlightBlock will be removed entirely in v12.0\");\n    deprecated(\"10.7.0\", \"Please use highlightElement now.\");\n\n    return highlightElement(el);\n  }\n\n  /* Interface definition */\n  Object.assign(hljs, {\n    highlight,\n    highlightAuto,\n    highlightAll,\n    fixMarkup: deprecateFixMarkup,\n    highlightElement,\n    // TODO: Remove with v12 API\n    highlightBlock: deprecateHighlightBlock,\n    configure,\n    initHighlighting,\n    initHighlightingOnLoad,\n    registerLanguage,\n    unregisterLanguage,\n    listLanguages,\n    getLanguage,\n    registerAliases,\n    requireLanguage,\n    autoDetection,\n    inherit: inherit$1,\n    addPlugin,\n    // plugins for frameworks\n    vuePlugin: BuildVuePlugin(hljs).VuePlugin\n  });\n\n  hljs.debugMode = function() { SAFE_MODE = false; };\n  hljs.safeMode = function() { SAFE_MODE = true; };\n  hljs.versionString = version;\n\n  for (const key in MODES) {\n    // @ts-ignore\n    if (typeof MODES[key] === \"object\") {\n      // @ts-ignore\n      deepFreezeEs6(MODES[key]);\n    }\n  }\n\n  // merge all the modes/regexs into our main object\n  Object.assign(hljs, MODES);\n\n  // built-in plugins, likely to be moved out of core in the future\n  hljs.addPlugin(brPlugin); // slated to be removed in v11\n  hljs.addPlugin(mergeHTMLPlugin);\n  hljs.addPlugin(tabReplacePlugin);\n  return hljs;\n};\n\n// export an \"instance\" of the highlighter\nvar highlight = HLJS({});\n\nmodule.exports = highlight;\n\n\n//# sourceURL=webpack://test/./node_modules/highlight.js/lib/core.js?");

/***/ }),

/***/ "./node_modules/highlight.js/lib/languages/c-like.js":
/*!***********************************************************!*\
  !*** ./node_modules/highlight.js/lib/languages/c-like.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction optional(re) {\n  return concat('(', re, ')?');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: C++\nCategory: common, system\nWebsite: https://isocpp.org\n*/\n\n/** @type LanguageFn */\nfunction cPlusPlus(hljs) {\n  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\n  // not include such support nor can we be sure all the grammars depending\n  // on it would desire this behavior\n  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', {\n    contains: [\n      {\n        begin: /\\\\\\n/\n      }\n    ]\n  });\n  const DECLTYPE_AUTO_RE = 'decltype\\\\(auto\\\\)';\n  const NAMESPACE_RE = '[a-zA-Z_]\\\\w*::';\n  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';\n  const FUNCTION_TYPE_RE = '(' +\n    DECLTYPE_AUTO_RE + '|' +\n    optional(NAMESPACE_RE) +\n    '[a-zA-Z_]\\\\w*' + optional(TEMPLATE_ARGUMENT_RE) +\n  ')';\n  const CPP_PRIMITIVE_TYPES = {\n    className: 'keyword',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  };\n\n  // https://en.cppreference.com/w/cpp/language/escape\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n  const CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)';\n  const STRINGS = {\n    className: 'string',\n    variants: [\n      {\n        begin: '(u8?|U|L)?\"',\n        end: '\"',\n        illegal: '\\\\n',\n        contains: [ hljs.BACKSLASH_ESCAPE ]\n      },\n      {\n        begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + \"|.)\",\n        end: '\\'',\n        illegal: '.'\n      },\n      hljs.END_SAME_AS_BEGIN({\n        begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n        end: /\\)([^()\\\\ ]{0,16})\"/\n      })\n    ]\n  };\n\n  const NUMBERS = {\n    className: 'number',\n    variants: [\n      {\n        begin: '\\\\b(0b[01\\']+)'\n      },\n      {\n        begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)'\n      },\n      {\n        begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)'\n      }\n    ],\n    relevance: 0\n  };\n\n  const PREPROCESSOR = {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/,\n    end: /$/,\n    keywords: {\n      'meta-keyword':\n        'if else elif endif define undef warning error line ' +\n        'pragma _Pragma ifdef ifndef include'\n    },\n    contains: [\n      {\n        begin: /\\\\\\n/,\n        relevance: 0\n      },\n      hljs.inherit(STRINGS, {\n        className: 'meta-string'\n      }),\n      {\n        className: 'meta-string',\n        begin: /<.*?>/\n      },\n      C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n\n  const TITLE_MODE = {\n    className: 'title',\n    begin: optional(NAMESPACE_RE) + hljs.IDENT_RE,\n    relevance: 0\n  };\n\n  const FUNCTION_TITLE = optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\s*\\\\(';\n\n  const COMMON_CPP_HINTS = [\n    'asin',\n    'atan2',\n    'atan',\n    'calloc',\n    'ceil',\n    'cosh',\n    'cos',\n    'exit',\n    'exp',\n    'fabs',\n    'floor',\n    'fmod',\n    'fprintf',\n    'fputs',\n    'free',\n    'frexp',\n    'auto_ptr',\n    'deque',\n    'list',\n    'queue',\n    'stack',\n    'vector',\n    'map',\n    'set',\n    'pair',\n    'bitset',\n    'multiset',\n    'multimap',\n    'unordered_set',\n    'fscanf',\n    'future',\n    'isalnum',\n    'isalpha',\n    'iscntrl',\n    'isdigit',\n    'isgraph',\n    'islower',\n    'isprint',\n    'ispunct',\n    'isspace',\n    'isupper',\n    'isxdigit',\n    'tolower',\n    'toupper',\n    'labs',\n    'ldexp',\n    'log10',\n    'log',\n    'malloc',\n    'realloc',\n    'memchr',\n    'memcmp',\n    'memcpy',\n    'memset',\n    'modf',\n    'pow',\n    'printf',\n    'putchar',\n    'puts',\n    'scanf',\n    'sinh',\n    'sin',\n    'snprintf',\n    'sprintf',\n    'sqrt',\n    'sscanf',\n    'strcat',\n    'strchr',\n    'strcmp',\n    'strcpy',\n    'strcspn',\n    'strlen',\n    'strncat',\n    'strncmp',\n    'strncpy',\n    'strpbrk',\n    'strrchr',\n    'strspn',\n    'strstr',\n    'tanh',\n    'tan',\n    'unordered_map',\n    'unordered_multiset',\n    'unordered_multimap',\n    'priority_queue',\n    'make_pair',\n    'array',\n    'shared_ptr',\n    'abort',\n    'terminate',\n    'abs',\n    'acos',\n    'vfprintf',\n    'vprintf',\n    'vsprintf',\n    'endl',\n    'initializer_list',\n    'unique_ptr',\n    'complex',\n    'imaginary',\n    'std',\n    'string',\n    'wstring',\n    'cin',\n    'cout',\n    'cerr',\n    'clog',\n    'stdin',\n    'stdout',\n    'stderr',\n    'stringstream',\n    'istringstream',\n    'ostringstream'\n  ];\n\n  const CPP_KEYWORDS = {\n    keyword: 'int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof ' +\n      'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' +\n      'unsigned long volatile static protected bool template mutable if public friend ' +\n      'do goto auto void enum else break extern using asm case typeid wchar_t ' +\n      'short reinterpret_cast|10 default double register explicit signed typename try this ' +\n      'switch continue inline delete alignas alignof constexpr consteval constinit decltype ' +\n      'concept co_await co_return co_yield requires ' +\n      'noexcept static_assert thread_local restrict final override ' +\n      'atomic_bool atomic_char atomic_schar ' +\n      'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' +\n      'atomic_ullong new throw return ' +\n      'and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq',\n    built_in: '_Bool _Complex _Imaginary',\n    _relevance_hints: COMMON_CPP_HINTS,\n    literal: 'true false nullptr NULL'\n  };\n\n  const FUNCTION_DISPATCH = {\n    className: \"function.dispatch\",\n    relevance: 0,\n    keywords: CPP_KEYWORDS,\n    begin: concat(\n      /\\b/,\n      /(?!decltype)/,\n      /(?!if)/,\n      /(?!for)/,\n      /(?!while)/,\n      hljs.IDENT_RE,\n      lookahead(/\\s*\\(/))\n  };\n\n  const EXPRESSION_CONTAINS = [\n    FUNCTION_DISPATCH,\n    PREPROCESSOR,\n    CPP_PRIMITIVE_TYPES,\n    C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    NUMBERS,\n    STRINGS\n  ];\n\n\n  const EXPRESSION_CONTEXT = {\n    // This mode covers expression context where we can't expect a function\n    // definition and shouldn't highlight anything that looks like one:\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\n    variants: [\n      {\n        begin: /=/,\n        end: /;/\n      },\n      {\n        begin: /\\(/,\n        end: /\\)/\n      },\n      {\n        beginKeywords: 'new throw return else',\n        end: /;/\n      }\n    ],\n    keywords: CPP_KEYWORDS,\n    contains: EXPRESSION_CONTAINS.concat([\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat([ 'self' ]),\n        relevance: 0\n      }\n    ]),\n    relevance: 0\n  };\n\n  const FUNCTION_DECLARATION = {\n    className: 'function',\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n    returnBegin: true,\n    end: /[{;=]/,\n    excludeEnd: true,\n    keywords: CPP_KEYWORDS,\n    illegal: /[^\\w\\s\\*&:<>.]/,\n    contains: [\n      { // to prevent it from being confused as the function title\n        begin: DECLTYPE_AUTO_RE,\n        keywords: CPP_KEYWORDS,\n        relevance: 0\n      },\n      {\n        begin: FUNCTION_TITLE,\n        returnBegin: true,\n        contains: [ TITLE_MODE ],\n        relevance: 0\n      },\n      // needed because we do not have look-behind on the below rule\n      // to prevent it from grabbing the final : in a :: pair\n      {\n        begin: /::/,\n        relevance: 0\n      },\n      // initializers\n      {\n        begin: /:/,\n        endsWithParent: true,\n        contains: [\n          STRINGS,\n          NUMBERS\n        ]\n      },\n      {\n        className: 'params',\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        relevance: 0,\n        contains: [\n          C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          STRINGS,\n          NUMBERS,\n          CPP_PRIMITIVE_TYPES,\n          // Count matching parentheses.\n          {\n            begin: /\\(/,\n            end: /\\)/,\n            keywords: CPP_KEYWORDS,\n            relevance: 0,\n            contains: [\n              'self',\n              C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRINGS,\n              NUMBERS,\n              CPP_PRIMITIVE_TYPES\n            ]\n          }\n        ]\n      },\n      CPP_PRIMITIVE_TYPES,\n      C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      PREPROCESSOR\n    ]\n  };\n\n  return {\n    name: 'C++',\n    aliases: [\n      'cc',\n      'c++',\n      'h++',\n      'hpp',\n      'hh',\n      'hxx',\n      'cxx'\n    ],\n    keywords: CPP_KEYWORDS,\n    illegal: '</',\n    classNameAliases: {\n      \"function.dispatch\": \"built_in\"\n    },\n    contains: [].concat(\n      EXPRESSION_CONTEXT,\n      FUNCTION_DECLARATION,\n      FUNCTION_DISPATCH,\n      EXPRESSION_CONTAINS,\n      [\n        PREPROCESSOR,\n        { // containers: ie, `vector <int> rooms (9);`\n          begin: '\\\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*<',\n          end: '>',\n          keywords: CPP_KEYWORDS,\n          contains: [\n            'self',\n            CPP_PRIMITIVE_TYPES\n          ]\n        },\n        {\n          begin: hljs.IDENT_RE + '::',\n          keywords: CPP_KEYWORDS\n        },\n        {\n          className: 'class',\n          beginKeywords: 'enum class struct union',\n          end: /[{;:<>=]/,\n          contains: [\n            {\n              beginKeywords: \"final class struct\"\n            },\n            hljs.TITLE_MODE\n          ]\n        }\n      ]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: CPP_KEYWORDS\n    }\n  };\n}\n\n/*\nLanguage: C-like (deprecated, use C and C++ instead)\nAuthor: Ivan Sagalaev <maniac@softwaremaniacs.org>\nContributors: Evgeny Stepanischev <imbolk@gmail.com>, Zaven Muradyan <megalivoithos@gmail.com>, Roel Deckers <admin@codingcat.nl>, Sam Wu <samsam2310@gmail.com>, Jordi Petit <jordi.petit@gmail.com>, Pieter Vantorre <pietervantorre@gmail.com>, Google Inc. (David Benjamin) <davidben@google.com>\n*/\n\n/** @type LanguageFn */\nfunction cLike(hljs) {\n  const lang = cPlusPlus(hljs);\n\n  const C_ALIASES = [\n    \"c\",\n    \"h\"\n  ];\n\n  const CPP_ALIASES = [\n    'cc',\n    'c++',\n    'h++',\n    'hpp',\n    'hh',\n    'hxx',\n    'cxx'\n  ];\n\n  lang.disableAutodetect = true;\n  lang.aliases = [];\n  // support users only loading c-like (legacy)\n  if (!hljs.getLanguage(\"c\")) lang.aliases.push(...C_ALIASES);\n  if (!hljs.getLanguage(\"cpp\")) lang.aliases.push(...CPP_ALIASES);\n\n  // if c and cpp are loaded after then they will reclaim these\n  // aliases for themselves\n\n  return lang;\n}\n\nmodule.exports = cLike;\n\n\n//# sourceURL=webpack://test/./node_modules/highlight.js/lib/languages/c-like.js?");

/***/ }),

/***/ "./src/docs/course-2/semester-2/it-system-design/text.md":
/*!***************************************************************!*\
  !*** ./src/docs/course-2/semester-2/it-system-design/text.md ***!
  \***************************************************************/
/***/ ((module) => {

eval("// Module\nvar code = \"<div><style>p {text-align: justify;}</style>\\n\\n<h4 id=\\\"-1\\\">ЗАВДАННЯ ПС1</h4>\\n<h5 id=\\\"-i-\\\">Організація роботи на основi каскаду для проекту</h5>\\n<p>При організації роботи на основi каскаду проект ділиться на підставі виду робіт. Щоб створити ПЗ, необхідно зробити певні дії: проаналізувати вимоги, створити проект, виконати кодування та тестування. Наприклад, річний проект може включати двомісячну фазу аналізу, за якою слідує чотиримісячна фаза проектування, потім тримісячна фаза кодування і тримісячна фаза тестування.</p>\\n<h4 id=\\\"-2\\\">ЗАВДАННЯ ПС2</h4>\\n<h5 id=\\\"-idef9-business-constraint-discovery-\\\">Модель IDEF9 (Business Constraint Discovery)</h5>\\n<p>Модель IDEF9 (Business Constraint Discovery): модель призначена для аналізу наявних умов й обмежень (в тому числі фізичних, юридичних або будь–яких інших, їх вплив на рішення, які приймаються в процесі реінжинірингу.</p>\\n<h4 id=\\\"-3\\\">ЗАВДАННЯ ПС3</h4>\\n<h5 id=\\\"-\\\">Об&#39;єктна структура побудови моделей предметної області діяльності підприємства</h5>\\n<p>Об&#39;єкт – це сутність, яку використовують при виконанні деякої функції або операції (перетворення, обробка, формування тощо). Об&#39;єкти можуть мати динамічну або статичну природу: динамічні об&#39;єкти використовують в одному циклі відтворення, наприклад замовлення на продукцію, рахунки на оплату, платежі. Статичні об&#39;єкти використовують у багатьох циклах відтворення, наприклад, обладнання, персонал, запаси матеріалів.</p>\\n<p>На зовнішньому рівні деталізації моделі виділяють:</p>\\n<p>– основні види матеріальних об&#39;єктів (наприклад, сировина і матеріали, напівфабрикати, готові вироби, послуги),\\n– основні види інформаційних об&#39;єктів або документів (наприклад, замовлення, накладні, рахунки тощо).</p>\\n<p>На концептуальному рівні побудови моделі предметної області уточнюється склад класів об&#39;єктів, визначаються їх атрибути та взаємозв&#39;язки. Таким чином будується узагальнене уявлення структури предметної області.\\nНа внутрішньому рівні концептуальна модель відображається у вигляді файлів бази даних, вхідних і вихідних документів ІС (при цьому динамічні об&#39;єкти, наприклад економічної ІС, зображують одиницями змінної інформації або документами, а статичні об&#39;єкти – одиницями умовно–постійної інформації у вигляді списків, номенклатур, цінників, довідників, класифікаторів).</p>\\n<p>Модель бази даних як постійно підтримуваний інформаційний ресурс відображає зберігання умовно–постійної і накопичуваної змінної інформації, яку використовують в повторюваних інформаційних процесах.</p>\\n<h4 id=\\\"-4\\\">ЗАВДАННЯ ПС4</h4>\\n<h5 id=\\\"-\\\">Змішаний підхід проектування Мак–Коннелла</h5>\\n<p>Відповідно до підходу проектування Мак–Коннелла спочатку виконуються аналіз і проектування верхнього рівня в стилі водоспаду, а потім кодування і тестування, розділені на ітерації. В такому проекті може бути чотиримісячний етап аналізу і проектування, а потім чотири двомісячні ітерації побудови системи.</p>\\n<h4 id=\\\"-5\\\">ЗАВДАННЯ ПС5</h4>\\n<h5 id=\\\"-\\\">Моделі бізнес–об&#39;єктів</h5>\\n<p>Модель конкретного підприємства можна будувати або шляхом вибору фрагментів основної або типової моделі у відповідності зі специфічними особливостями підприємства (BAAN Enterprise Modeler), або шляхом автоматизованої адаптації цих моделей в результаті експертного опитування (SAP Business Engineering Workbench). Побудована модель підприємства у вигляді мета–опису зберігається в репозиторії і при необхідності може бути відкорегована. На основі цієї моделі формується конфігурація та виконується налаштування ІС.</p>\\n<p>Бізнес–правила визначають умови коректності спільного застосування різних компонентів ІС і використовуються для підтримки цілісності створюваної системи. Модель бізнес–функцій є ієрархічною декомпозицію функціональної діяльності підприємства. Модель бізнес–процесів відображає виконання робіт для функцій самого нижнього рівня моделі бізнес–функцій. Для відображення процесів використовується модель управління подіями (ЕРС – Event–driven Process Chain). Саме модель бізнес–процесів дозволяє виконати налаштування програмних модулів – додатків ІС відповідно до характерних особливостей конкретного підприємства.\\nМоделі бізнес–об&#39;єктів використовують для інтеграції додатків, що підтримують виконання різних бізнес–процесів (саме тут передбачається застосування застосуванням UML). Модель організаційної структури підприємства є традиційною ієрархічною структурою підпорядкування підрозділів і персоналу.</p>\\n<p>Моделі бізнес-об&#39;єктів показують виконання бізнес-процесів організації її внутрішніми виконавцями. Основними компонентами моделей бізнес-об&#39;єктів є зовнішні та внутрішні виконавці, а також бізнес-сутності, що відображають все що використовують внутрішні виконавці для реалізації бізнес-процесів\\nВпровадження типової ІС розпочинається з аналізу вимог до конкретної ІС, які виявляються на основі результатів передпроектного обстеження об&#39;єкта автоматизації. Для оцінки відповідності цим вимогам програмних продуктів може використовуватися описана вище методика оцінки ППП. Після вибору програмного продукту на базі наявних в ньому референтних моделей будується попередня модель ІС, в якій відображаються всі особливості реалізації ІС для конкретного підприємства. Попередня модель є основою для вибору типової моделі системи і визначення переліку компонентів, які будуть реалізовані з використанням інших програмних засобів або зажадають розробки за допомогою інструментальних засобів, наявних в складі типової ІС (наприклад, Аварія в SAP, Tools в\\nBAAN). Реалізація типового проекту передбачає виконання таких операцій: встановлення глобальних параметрів системи; завдання структури об&#39;єкта автоматизації; визначення структури основних даних; задання переліку реалізованих функцій і процесів; опис інтерфейсів; опис звітів; налаштування авторизації доступу; налаштування системи архівування.</p>\\n<h4 id=\\\"-6\\\">ЗАВДАННЯ ПС6</h4>\\n<h5 id=\\\"-\\\">Підходи до управління життєвим циклом програмних продуктів</h5>\\n<p>Існують різні підходи до управління ЖЦ ІТ (в тому числі і ПЗ). Спочатку визначаються три основні фази життєвого циклу у вигляді таких видів діяльності:</p>\\n<ul>\\n<li>планування, </li>\\n<li>розробки, </li>\\n<li>експлуатації.</li>\\n</ul>\\n<p>На етапі планування. На цьому етапі визначається пріоритет ІТ порівняно з іншими можливостями для бізнес–інвестицій, визначаються нові ІТ–проекти та пріоритети між окремими ІТ проектами. Також аналізуються дані про поточний стан операційних систем, що є важливим вкладом у цю діяльність. Як добре виконують операційні системи свої функції, оцінюється якість та розраховується оціночний ефект від поліпшень На цьому етапі визначаються моделі ЖЦ та особливості їхнього застосування.</p>\\n<p>На етапі розробки реалізуються пріоритетні пропозиції, будується і апробується ІТ. Розроблення означає реалізацію списку пріоритетних пропозицій. Для цього потрібні певні ресурси розробників, які досконало володіють будь–якими технологіями та добре орієнтуються в бізнес–сфері користувачів (останні визначають, що їм потрібно). Для відстеження витрат і переваг розробляємих ІС слід керувати такими заходами:</p>\\n<ol>\\n<li>Управління витратами шляхом активного управління ресурсами.</li>\\n<li>Управління вигодами через активне управління функціональністю ІТ, які розробляються.</li>\\n<li>Управління графіком часу.</li>\\n<li>На цьому етапі згодом розробляються пріоритетні пропозиції щодо побудови, тестування та впровадження.\\nНа етапі експлуатації інформаційні системи знаходяться в стадії функціонування та підтримуються виробником.\\n78\\nУсі три етапи мають свої типові проблеми з витратами та вигодами для того, щоб налагодити їх ефективне управління.</li>\\n</ol>\\n<h4 id=\\\"-7\\\">ЗАВДАННЯ ПС7</h4>\\n<h5 id=\\\"-rational-unified-process-\\\">Охарактеризуйте принципи і сферу застосування методики аналізу і проектування Rational Unified Process.</h5>\\n<p>Основними принципами цієї технології є:</p>\\n<ol>\\n<li>Ітераційний та інкрементний (нарощуваний) підхід до створення ПЗ.</li>\\n<li>Планування та управління проектом на основі функціональних вимог до системи – варіантів використання.</li>\\n<li>Побудова системи на базі архітектури ПЗ.</li>\\n<li>Перший принцип є визначальним. Відповідно до нього розробка системи виконується у вигляді декількох короткострокових міні–проектів фіксованої тривалості (від 2 до 6 тижнів), названих ітераціями. Кожна ітерація включає власні етапи аналізу вимог, проектування, реалізації, тестування, інтеграції та завершується створенням працюючої системи. Ітераційний цикл ґрунтується на постійному розширенні та доповненні системи в процесі декількох ітерацій з періодичним зворотним зв&#39;язком та адаптацією модулів, які додаються до існуючого ядра системи. Система постійно розростається крок за кроком, тому такий підхід називають ітераційним та інкрементним. При цьому підході виключена побудова моделей без зворотного зв&#39;язку.</li>\\n</ol>\\n<p>Сутність планування полягає у визначенні послідовності ітерацій конструювання і варіантів використання, які реалізуються на кожній ітерації.\\nПланування завершується, коли визначено місце кожного варіанта використання на деякій ітерації та дата початку кожної ітерації.\\nНайважливішим результатом стадії розробки є опис базової архітектури майбутньої системи, яка є основою всієї подальшої розробки. Ця архітектура включає: \\n1) модель предметної області, яка відображає розуміння бізнесу і служить відправним пунктом для формування основних класів предметної області; \\n2) технологічну платформу, яка визначає основні елементи технології реалізації системи та їх взаємодію.</p>\\n<h4 id=\\\"-8\\\">ЗАВДАННЯ ПС8</h4>\\n<h5 id=\\\"-\\\">Яке співвідношення між стадіями і процесами ЖЦ ПЗ?</h5>\\n<p>Співвідношення процесів ЖЦ ПЗ і стадій ЖЦ, що характеризують часовий аспект ЖЦ системи, розглядається в рамках моделі ЖЦ ПЗ.</p>\\n<h4 id=\\\"-9\\\">ЗАВДАННЯ ПС9</h4>\\n<h5 id=\\\"-allfusion-modeling-suite\\\">Комплекс AllFusion Modeling Suite</h5>\\n<p>AllFusion Change Management Suite – це комплекс засобів керування конфігурацією та змінами, створений компанією Computer Associates (<a href=\\\"http://www.ca.com)\\\">www.ca.com)</a>, яка пропонує різні комплекси інструментальних засобів підтримки різних процесів життєвого циклу програмного забезпечення (ЖЦ ПЗ).\\nAllFusion Change Management Suite відноситься до верхніх (Upper) CASE-засобів і є по суті засобом комп&#39;ютерного планування, основною метою яких є допомога керівникам організацій, підприємств та конкретних проектів у визначенні політики організації та створенні планів проекту. CASE-засоби даного рівня дозволяють будувати модель предметної області, проводити аналіз різних сценаріїв (існуючого, найкращих, найгірших), накопичувати інформацію для прийняття оптимальних рішень. Таким чином, стосовно ЖЦ ПЗ та систем дані засоби підтримують процес замовлення та першу роботу процесу розробки (підготовка процесу розробки). Графічні засоби даного рівня використовуються як формалізована мова спілкування між замовником (користувачем) та розробником вимог. До засобів цього рівня крім лінійки AllFusion Modeling Suite можна також віднести, наприклад, Telelogic System Architect, Telelogic Focal Point, Telelogic Dashboard.</p>\\n<h4 id=\\\"-10\\\">ЗАВДАННЯ ПС10</h4>\\n<h5 id=\\\"-\\\">Що означає «швидка розробка ПЗ»?</h5>\\n<p>«Швидка розробка ПЗ» (Agile software development) базується на чотирьох ідеях, сформульованих ними в документі «Маніфест швидкої розробки ПЗ» і полягає в наступному:</p>\\n<ul>\\n<li>індивідууми і взаємодія між ними цінуються вище процесів та інструментів</li>\\n<li>працююче ПЗ цінується вище всеосяжної документації;</li>\\n<li>співпраця із замовниками цінується вище формальних договорів;</li>\\n<li>реагування на зміни цінується вище суворого дотримання плану.</li>\\n</ul>\\n<p>Центральною ідеєю швидкої розробки ПЗ є орієнтація на людей і комунікацію.\\nШвидкість передбачає маневреність. Розповсюдження ПЗ в Інтернеті ще більше посилило конкуренцію між програмними продуктами: потрібно не тільки випускати програми на ринок і скорочувати кількість дефектів в них, а й постійно стежити за вимогами користувачів і ринку, що змінюються.</p>\\n<p>При такому підході технологія займає в процесі створення ПЗ конкретне місце, вона підвищує ефективність діяльності розробників при наявності будь–яких з таких умов - вона:</p>\\n<ul>\\n<li>дозволяє людям легше висловити свої думки (мова високого рівня дає можливість стисло висловлювати ідеї; деякі мови високого рівня дозволяють людині мислити в технологічному просторі, наближеному до проблемного простору, майже не відволікаючись на думки про обмеження реалізації); </li>\\n<li>виконує завдання, нездійсненні вручну (інструменти виміру та аналізу збирають дані, які інакше зібрати було б неможливо; програмісти говорять про них, як про основні інструменти);</li>\\n<li>автоматизує схильні до помилок дії: компілятори, електронні таблиці, засоби управління конфігурацією ПЗ є настільки важливими, що деякі програмісти навіть не згадують про них як про інструменти, а припускають їх присутність;</li>\\n<li>полегшує спілкування між людьми: у середовищі розподіленої розробки ПЗ всі види інструментів обміну інформацією допомагають команді працювати.</li>\\n</ul>\\n<h4 id=\\\"-11\\\">ЗАВДАННЯ ПС11</h4>\\n<h5 id=\\\"-\\\">Що таке архітектура інформаційних систем? Назвіть основні підходи до проектування ІС.</h5>\\n<p>Нині існує різноманіття трактувань терміну «архітектура». Деякі вчені під архітектурою розуміють:</p>\\n<ul>\\n<li>набір основних правил, які визначають організацію системи; </li>\\n<li>сукупність структурних елементів системи і зв&#39;язків між ними; </li>\\n<li>поведінку елементів системи в процесі їх взаємодії; </li>\\n<li>ієрархію підсистем, яка об&#39;єднує структурні елементи;</li>\\n<li>архітектурний стиль (використовувані методи і засоби опису архітектури, а також архітектурні зразки); </li>\\n<li>формальний опис системи, або детальний план системи на рівні компонентів і методології їх реалізації. </li>\\n</ul>\\n<p>Визначити поняття «aрхітектура інформаційної системи» можна різними способами, що пов&#39;язано із відсутністю загальноприйнятого визначення поняття «ІС».\\nВідповідно до стандарту ANSI/IEEE 1471–2000, загальноприйнятим є таке визначення архітектури cистеми – це опис організації системи в термінах компонентів, їх взаємозв&#39;язків між собою і з довкіллям, принципи управління їх розробкою і розвитком. Архітектуру ІС можна описати як концепцію, яка визначає модель, структуру, виконувані функції та взаємозв&#39;язок компонентів.</p>\\n<ol>\\n<li>Традиційні архітектурні рішення, засновані на використанні виділених файлів–серверів або серверів баз даних. </li>\\n<li>Архітектури корпоративних ІС, які базуються на технології Internet (Intranet–додатки). </li>\\n<li>Архітектури ІС, які ґрунтуються на концепції «сховища даних» (DataWarehouse) – інтегрованого інформаційного середовища, що складається із різнорідних інформаційних ресурсів. </li>\\n<li>Для побудови глобальних розподілених інформаційних додатків використовується архітектура інтеграції інформаційно–обчислювальних компонентів на основі об&#39;єктно–орієнтованого підходу.</li>\\n</ol>\\n<h4 id=\\\"-12\\\">ЗАВДАННЯ ПС12</h4>\\n<h5 id=\\\"-\\\">Процес супроводження ПЗ</h5>\\n<p>Процес супроводження програмного забезпечення є дуже важливим етапом та передбачає виконання дій та завдань з боку супроводжуючої організації чи служби супроводу. Даний процес активується при змінах (модифікаціях) програмного продукту та відповідної документації, викликаних проблемами, що виникли (потребами в модернізації або адаптації ПЗ).</p>\\n<p>Під супроводом, в свою чергу, розуміють внесення змін до програмного забезпечення з метою виправлення помилок, підвищення продуктивності або адаптації до умов роботи (або до вимог), які змінилися.</p>\\n<p>Зміни, які вносяться до існуючого ПЗ, не повинні порушувати його цілісність. Процес супроводу включає перенесення ПЗ в інше середовище (міграцію) та закінчується зняттям ПЗ з експлуатації.</p>\\n<p>Процес супроводу охоплює наступні дії:</p>\\n<ul>\\n<li>підготовчу роботу;</li>\\n<li>аналіз проблем і запитів на модифікацію ПЗ;</li>\\n<li>модифікацію ПЗ;</li>\\n<li>перевірку і приймання;</li>\\n<li>перенесення ПЗ в інше середовище;</li>\\n<li>зняття ПЗ з експлуатації.</li>\\n</ul>\\n<p>Підготовча робота служби супроводу передбачає такі завдання:</p>\\n<ul>\\n<li>планування дій і робіт, які виконуються в процесі супроводу;</li>\\n<li>визначення процедур локалізації та ліквідації проблем, які виникають в процесі супроводу.</li>\\n</ul>\\n<p>Аналіз проблем і запитів на модифікацію ПЗ, що виконується службою супроводу,\\nвключає такі завдання:</p>\\n<ul>\\n<li>аналіз повідомлення про проблему, яка виникла, або запит на модифікацію ПЗ\\nщодо його впливу на організацію, існуючу систему та інтерфейси з іншими системами; при цьому визначаються такі характеристики можливої модифікації: тип модифікації (коригуюча, поліпшуюча, профілактична або адаптуюча до нового середовища); масштаб (розміри модифікації, вартість і час її реалізації); критичність (вплив на продуктивність, надійність або безпеку);</li>\\n<li>оцінка доцільності проведення модифікації та можливих варіантів її проведення;</li>\\n<li>затвердження обраного варіанту модифікації.</li>\\n</ul>\\n<p>Модифікація ПЗ передбачає визначення компонентів ПЗ (їхніх версій і документації),\\nякі підлягають модифікації, внесення необхідних змін відповідно до правил процесу розробки. Підготовлені зміни тестуються і перевіряються за критеріями, визначеними в документації. При підтвердженні правильності змін в програмах виконується коригування документації.</p>\\n<p>Перевірка і приймання полягають у перевірці цілісності системи, яка модифікується, і у затвердженні внесених змін. При перенесенні ПЗ в інше середовище, використовуються наявні або розробляються нові засоби перенесення, потім виконується конвертування програм і даних у нове середовище. Щоб полегшити перенос ПЗ в інше середовище, протягом деякого періоду передбачається паралельна експлуатація ПЗ в старому і новому середовищах (коли проводиться необхідне навчання користувачів роботі в новому середовищі).</p>\\n<p>Зняття ПЗ з експлуатації здійснюється за рішенням замовника за участю експлуатуючої організації, служби супроводу і користувачів. При цьому програмні продукти і відповідна документація підлягає архівуванню відповідно до договору. Протягом деякого періоду передбачена паралельна експлуатація старого і нового ПЗ (виконується необхідне навчання користувачів роботі з новою системою).</p>\\n<h4 id=\\\"-13\\\">ЗАВДАННЯ ПС13</h4>\\n<h5 id=\\\"-\\\">Нормативно–методичне забезпечення (НМЗ) створення програмного забезпечення</h5>\\n<p>Розробка великих проектів пов&#39;язана з роботою колективів людей з декількох організацій, тому вона вимагає сукупність нормативно–методичних документів, які регламентують різні аспекти діяльності розробників. Комплекс таких документів називають нормативно–методичним забезпеченням (НМЗ). Ці документи «регламентують: </p>\\n<ul>\\n<li>порядок розробки, впровадження та супроводу ПЗ; </li>\\n<li>загальні вимоги до складу ПЗ і зв&#39;язків між його компонентами, а також до його якості; </li>\\n<li>види, склад і зміст проектної та програмної документації. </li>\\n</ul>\\n<p>Дотримання вимог НМЗ дозволяє створювати ПЗ високої якості, яке відповідає вимогам міжнародних стандартів в області інформаційних технологій (ІТ).</p>\\n<p>До складу НМЗ входять стандарти та керівні документи, методики виконання складних операцій, шаблони проектних і програмних документів. Всі документи, які входять до складу НМЗ, класифікуються за такими ознаками: </p>\\n<ul>\\n<li>«за видом регламентації (стандарт, керівний документ, положення, інструкція тощо);</li>\\n<li>за статусом, який регламентує документ (міжнародний, галузевий, підприємства);</li>\\n<li>за областю дії документа (замовник, підрядник, проект);</li>\\n<li>за об&#39;єктом регламентації або методичного забезпечення».</li>\\n</ul>\\n<p>Нормативною базою НМЗ є міжнародні та вітчизняні стандарти в області ІТ і перш за все:</p>\\n<ul>\\n<li>міжнародні стандарти ISO / IEC (ISO – International Organization of Standardization, Міжнародна організація із стандартизації, IEC – International Electrotechnical Commission, Міжнародна комісія з електротехніки);</li>\\n<li>стандарти організації–замовника. У вітчизняних розробках доцільно використовувати сучасні міжнародні стандарти.</li>\\n</ul>\\n<p>Поняття життєвого циклу (ЖЦ) ПЗ є одним із базових понять програмної\\nінженерії. Життєвий цикл ІС – це модель створення та використання ІС, яка 36\\nвідображає її різні стани, починаючи з моменту виникнення необхідності в даному комплексі засобів і закінчуючи моментом повного виходу системи з періоду використання користувачами. Умовно можна виділити такі основні етапи ЖЦ ІС:\\n1) аналіз – визначення того, що повинна робити система;\\n2) проектування – визначення того, як система робитиме те, що вона повинна робити (проектування це, перш за все, специфікація підсистем, функціональних компонентів і способів їх взаємодії в системі);\\n3) розробка – створення функціональних компонентів і підсистем окремо, з&#39;єднання підсистем в єдине ціле;\\n4) тестування – перевірка функціональної та параметричної відповідності системи показникам, визначеним на етапі аналізу;\\n5) впровадження – встановлення і введення системи в дію;\\n6) супровід – забезпечення штатного процесу експлуатації системи на підприємстві замовника.\\nЕтапи розробки, тестування і впровадження ІС позначаються єдиним терміном – реалізація.</p>\\n<h4 id=\\\"-14\\\">ЗАВДАННЯ ПС14</h4>\\n<h5 id=\\\"-\\\">Технологія проектування інформаційних систем ІС</h5>\\n<p>Масштаби розроблюваних систем визначають склад і кількість учасників процесу проектування. При великому обсязі і жорстких термінах виконання проектних робіт в розробці системи може брати участь кілька проектних колективів (організацій–розробників). У цьому випадку виділяється головна організація, яка координує діяльність усіх організацій–співвиконавців.</p>\\n<p>Проектування ІС передбачає використання проектувальниками певної технології проектування, яка відповідає масштабу та особливостям розроблюваного проекту.\\nТехнологією проектування (ТП) ІС є «сукупність методології та засобів проектування ІС, а також методів і засобів організації проектування (управління процесом створення та модернізації проекту ІС)».</p>\\n<p>В основі ТП ІС лежить технологічний процес, який визначає дії, їх послідовність, склад виконавців, кошти і ресурси, необхідні для виконання цих дій. Технологія проектування задається регламентованою послідовністю технологічних операцій, що виконуються в процесі створення проекту на основі конкретного методу, в результаті чого стало б ясно, не тільки ЩО повинно бути зроблено для створення проекту, але і ЯК, КОМУ і в ЯКІЙ ПОСЛІДОВНОСТІ це повинно бути зроблено.</p>\\n<p>До основних вимог, які пред&#39;являють до обраної ТП ІС, відносяться такі:</p>\\n<ul>\\n<li>створений за допомогою цієї технології проект повинен відповідати вимогам замовника в частині функціональної повноти, достовірності, оперативності;</li>\\n<li>технологія повинна:</li>\\n<li>максимально відображати всі етапи ЖЦ проекту; забезпечувати адаптівність проектних рішень в процесі експлуатації ІС;</li>\\n<li>забезпечувати: мінімальні трудові та вартісні витрати на проектування і супровід проекту; розробку проекту у встановлені терміни; надійність процесу проектування ІС та експлуатації проекту;</li>\\n<li>сприяти зростанню продуктивності праці проектувальника;</li>\\n<li>бути основою зв&#39;язку між проектуванням і супроводом проекту;</li>\\n<li>сприяти простому веденню проектної документації, забезпечувати економічну ефективність проектної діяльності (витрати на розробки повинні окупатися за рахунок доходів від реалізації проекту)</li>\\n</ul>\\n<h4 id=\\\"-15\\\">ЗАВДАННЯ ПС15</h4>\\n<h5 id=\\\"-\\\">У чому полягає мета проектування ПЗ?</h5>\\n<p>Головна мета проектування полягає у відображенні функцій, отриманих на етапі аналізу, в модулі ІС. При проектуванні модулів визначають інтерфейси програм: розмічають меню, вигляд вікон, гарячі клавіші і пов&#39;язані з ними виклики.</p>\\n<h4 id=\\\"-16\\\">ЗАВДАННЯ ПС16</h4>\\n<h5 id=\\\"-\\\">Структура управління діяльності підприємства</h5>\\n<p>В залежності від різних умов перебігу бізнес–процесу у сукупності функцій цього процесу можливі альтернативні або циклічні послідовності. Ці умови пов&#39;язані з подіями, які відбуваються у зовнішньому середовищі або у самих процесах і з виникненням конкретних станів об&#39;єктів (наприклад, замовлення прийняте, відкинуте, відправлене на коригування). Події викликають виконання функцій, які, в свою чергу, змінюють стан об&#39;єктів і формують нові події, поки не буде завершено певний бізнес–процес. Тоді послідовність подій становить конкретну реалізацію бізнес–процесу.</p>\\n<p>Кожна подія описується з двох точок зору: інформаційної та процедурної. </p>\\n<ol>\\n<li>Інформаційна подія відбивається у вигляді деякого повідомлення, яке фіксує факт виконання деякої функції зміни стану або появи нової. </li>\\n<li>Процедурна подія викликає виконання нової функції, і тому для кожного стану об&#39;єкта повинні бути задані описи цих викликів. </li>\\n</ol>\\n<p>Таким чином, події виступають в сполучній (зв&#39;язуючій) ролі для виконання функцій бізнес–процесів.</p>\\n<p>На зовнішньому рівні визначаються: </p>\\n<ul>\\n<li>список зовнішніх подій, які викликаються взаємодією підприємства із зовнішнім середовищем (платежі податків, відсотки за кредитами, поставки за контрактами тощо), </li>\\n<li>список цільових установок, яким повинні відповідати бізнес–процеси (регламент виконання процесів, підтримка рівня матеріальних запасів, рівень якості продукції тощо).\\nНа концептуальному рівні встановлюються бізнес–правила, які визначають умови виконання функцій при виникненні подій і досягненні станів об&#39;єктів.</li>\\n</ul>\\n<p>На внутрішньому рівні виконується формалізація бізнес–правил у вигляді викликів програмних модулів.</p>\\n<h4 id=\\\"-17\\\">ЗАВДАННЯ ПС17</h4>\\n<h5 id=\\\"-\\\">Каскадна модель ЖЦ ПЗ</h5>\\n<p>Модель життєвого циклу (ЖЦ) – це структура яка містить процеси, дії та завдання, що здійснюються під час розробки, функціонування та супроводу програмного продукту протягом усього життя системи (від визначення вимог до завершення використання такої системи). Існуючі моделі ЖЦ визначають порядок виконання етапів у процесі створення ІС, а також критерії переходу від етапу до етапу. Найбільшого поширення набули каскадна модель, поетапна ітераційна модель з проміжним контролем та спіральна модель.</p>\\n<p>У 1970 р. експерт в галузі ПЗ Уїнстон Ройс опублікував статтю, в якій виклав думки про методику «моделі водоспаду» (waterfall model), або «каскадну модель» (рис. 7.1). Ця модель згодом була регламентована множиною нормативних документів, зокрема, стандартом Міністерства оборони США Dod–STD–2167A.</p>\\n<p>До принципових властивостей «чистої» каскадної моделі відносять наступне:</p>\\n<ul>\\n<li>фіксація вимог до системи до часу її здачі замовнику;</li>\\n<li>перехід на чергову стадію проекту відбувається тільки після того, як повністю завершена робота на поточній стадії, без повернень на пройдені стадії.</li>\\n</ul>\\n<p>Кожна стадія закінчується отриманням результатів, які служать вихідними даними для наступної стадії та випуском комплекту документації, достатнього для того, щоб розробку можна було продовжити іншою командою розробників.</p>\\n<p>Вимоги до ПЗ, яке розробляється, визначені на стадії формування вимог, чітко документуються у вигляді технічного завдання і фіксуються на весь час розробки проекту. Узгодження отриманих результатів з користувачами проводиться тільки в точках, запланованих після завершення кожної стадії (при цьому можливе лише коригування результатів по зауваженнях користувачів, якщо вони не зачіпають вимоги, викладені в технічному завданні). Отже, користувачі можуть внести суттєві зауваження тільки після того, як робота над системою буде повністю завершена. У разі неточного викладу вимог або їх зміни протягом тривалого періоду створення ПЗ користувачі отримують систему, яка не задовольняє їх потребам. В результаті доводиться розпочинати новий проект, який може спіткати така ж доля.</p>\\n<p>Перевагами застосування каскадної моделі є:</p>\\n<ul>\\n<li>формування на кожній стадії закінченого набору проектної документації, який відповідає критеріям повноти та узгодженості;</li>\\n<li>можливість планувати час завершення всіх робіт та відповідних витрати, адже стадії робіт виконуються в логічній послідовності.</li>\\n</ul>\\n<p>Каскадну модель можна використати при створенні ПЗ, для якого на початку розробки можна точно і повно сформулювати всі вимоги. До цієї групи належать складні системи з великою кількістю завдань обчислювального характеру, системи управління виробничими процесами підвищеної небезпеки.</p>\\n<p>Недоліками застосування каскадного підходу є:</p>\\n<ul>\\n<li>запізніле виявлення проблем;</li>\\n<li>відхід від календарного графіка, запізнення з отриманням результатів;</li>\\n<li>надлишкова кількість документації;</li>\\n<li>неможливість розбити систему на частини (весь продукт розробляється за один раз); </li>\\n<li>високий ризик створення системи, що не задовольняє зміненим потребам користувачів.</li>\\n</ul>\\n<p>Реальний процес створення ПЗ не можливо повністю укласти в чітку схему, зазвичай, він носить ітераційний характер, а результати чергової стадії часто викликають зміни в проектних рішеннях, вироблених на більш ранніх стадіях. Отже, постійно виникає потреба в поверненні до попередніх стадій, в уточненні або перегляді раніше прийнятих рішень, тому зараз зустріти приклад каскадної моделі дуже важко.</p>\\n<h4 id=\\\"-18\\\">ЗАВДАННЯ ПС18</h4>\\n<h5 id=\\\"-\\\">Діалог типу «питання – відповідь»</h5>\\n<p>Структура діалогу типу «питання–відповідь» (Q&amp;A) базується на інтерв&#39;ю. Система бере на себе роль інтерв&#39;юера та отримує інформацію від користувача у вигляді відповідей на питання.</p>\\n<p>Всі діалоги, керовані комп&#39;ютером, в тій чи іншій мірі складаються з\\nпитань, на які користувач відповідає. Однак в структурі «Q &amp; A» цей процес виражено явно. У кожній точці діалогу система виводить одне питання, на яке користувач дає одну відповідь. Залежно від отриманої відповіді система може вирішити, яке наступне питання задавати. Існують системи, відповіді в яких даються на природній мові, але найчастіше використовують відповіді з одного слова з обмеженою граматикою.</p>\\n<p>Структура «Q &amp; A» має суттєвий недолік: навіть якщо процес введення відбувається досить швидко, для людини, що знає, які питання задає система і які відповіді потрібно на них давати, відповідати на всю серію питань досить втомливо. З появою графічного інтерфейсу структура «Q &amp; A» дещо застаріла, проте у неї є такі переваги: ця структура може задовольняти вимоги різних користувачів (зокрема, така структура доречна при реалізації діалогу з множиною «відгалужень» тобто у випадках, коли на питання передбачається велика кількість відповідей, кожна з яких впливає на наступне питання).</p>\\n<h4 id=\\\"-19\\\">ЗАВДАННЯ ПС19</h4>\\n<h5 id=\\\"-\\\">Яким чином можна домогтися підвищення рівня зрілості процесів створення ПЗ?</h5>\\n<p>Підвищення рівня зрілості процесів створення ПЗ можна домогтися за допомогою впровадження стандартів COBIT. В стандарті COBIT детально описані цілі та принципи управління, об&#39;єкти управління, чітко визначені всі ІТ–процеси (для кожного процесу визначено вхід–вихід, виконавці та відповідальні, об&#39;єкти контролю та метрики), вимоги до них, описані можливі інструменти їх реалізація. У описі ІТ–процесів також подано практичні рекомендації з управління ІТ безпекою. COBIT застосовується для контролю та аудиту існуючої системи управління ІТ, організації оперативного та стратегічного керівництві ІТ, аналізу витрат на ІТ–проекти та підтримку відповідної інфраструктури, відповідність вимогам необхідних стандартних та регулюючих організацій (таких як SOX та COSO).</p>\\n<h4 id=\\\"-20\\\">ЗАВДАННЯ ПС20</h4>\\n<h5 id=\\\"-\\\">Яким чином можна домогтися підвищення рівня зрілості процесів створення ПЗ?</h5>\\n<p>Підвищення рівня зрілості процесів створення ПЗ можна домогтися за допомогою впровадження стандартів COBIT. В стандарті COBIT детально описані цілі та принципи управління, об&#39;єкти управління, чітко визначені всі ІТ–процеси (для кожного процесу визначено вхід–вихід, виконавці та відповідальні, об&#39;єкти контролю та метрики), вимоги до них, описані можливі інструменти їх реалізація. У описі ІТ–процесів також подано практичні рекомендації з управління ІТ безпекою. COBIT застосовується для контролю та аудиту існуючої системи управління ІТ, організації оперативного та стратегічного керівництві ІТ, аналізу витрат на ІТ–проекти та підтримку відповідної інфраструктури, відповідність вимогам необхідних стандартних та регулюючих організацій (таких як SOX та COSO).</p>\\n<h4 id=\\\"-21\\\">ЗАВДАННЯ ПС21</h4>\\n<h5 id=\\\"-\\\">Назвіть вимоги, які висувають до моделей предметних областей.</h5>\\n<p>До моделей предметних областей висувають наступні вимоги: </p>\\n<ul>\\n<li>формалізація, яка забезпечує однозначний опис структури предметної області; </li>\\n<li>зрозумілість для замовників і розробників на основі застосування графічних засобів відображення моделі;</li>\\n<li>реалізація, що передбачає наявність засобів фізичної реалізації моделі предметної області в ІС;</li>\\n<li>забезпечення оцінювання ефективності реалізації моделі предметної області на основі визначених методів та обчислюваних показників.</li>\\n</ul>\\n<h4 id=\\\"-22\\\">ЗАВДАННЯ ПС22</h4>\\n<h5 id=\\\"-model-mart\\\">Засіб Model Mart</h5>\\n<p>Засіб Model Mart використовується для керування груповою розробкою. Він забезпечує багатокористувацький доступ до моделей, створених за допомогою ERwin і BPwin. Моделі зберігаються на центральному сервері і доступні для всіх учасників групи проектування.\\nModel Mart задовольняє ряду вимог, які пред&#39;являються до засобів управління розробкою великих систем, а саме:</p>\\n<ol>\\n<li>Спільне моделювання. Кожен учасник проекту має інструмент пошуку і доступу до моделі, яка цікавить його в будь–який час. При спільній роботі використовуються три режими: незахищений, захищений і режим перегляду (коли забороняється будь–яка зміна моделей).</li>\\n<li>Створення бібліотек рішень. Model Mart дозволяє 1) формувати бібліотеку стандартних рішень, які включають найбільш вдалі фрагменти реалізованих проектів, 2) накопичувати і використовувати типові моделі, об&#39;єднуючи їх при необхідності під час «збирання» великих систем. На основі існуючих баз даних за допомогою ERwin можна відновлювати моделі (реверсний інжиніринг), які в процесі аналізу придатності їх для нової системи можуть об&#39;єднуватися з типовими моделями з бібліотек моделей.</li>\\n<li>Управління доступом. Для кожного учасника проекту визначаються права доступу, відповідно до яких він отримує можливість працювати тільки з конкретними моделями. Права доступу можуть бути визначені як для груп, так і для окремих учасників проекту. Роль спеціалістів, що беруть участь в різних проектах, може змінюватися, тому в Model Mart можна визначати та управляти правами доступу учасників проекту до бібліотек, моделей і навіть до специфічних областей моделі.</li>\\n</ol>\\n<h4 id=\\\"-23\\\">ЗАВДАННЯ ПС23</h4>\\n<h5 id=\\\"-\\\">Реінжиніринг бізнес–процесів</h5>\\n<p>Систему реінжинірингу бізнес–процесів прийнято на озброєння провідними компаніями світу і бере вона свій початок з двох написаних у 1990 році статей, автором однієї із них є Хаммер, авторами другої - Давепорт та Шорт. Реінжиніринг, в свою чергу, це фундаментальне переосмислення та радикальне перепроектування бізнес–процесів з метою досягнення істотного поліпшення якості функціонування.</p>\\n<p>Реінжиніринг бізнес–процесів (РБП) – це сукупність методів та засобів, що має на меті істотне покращення основних показників діяльності підприємства шляхом моделювання, аналізу та перепроектування існуючих бізнес–процесів. Реінжиніринг бізнес–процесів застосовується за необхідності радикальних змін, яка передбачає створення нових, більш ефективних бізнес–процесів на підприємстві без урахування їх старої організації.\\nПід “істотне покращення” мається на увазі не просто підвищення певного параметру підприємства або покращання роботи окремої ланки організації на визначений відсоток, а якісний перехід до нового рівня ефективності бізнесу, здійснення прориву. Критерієм реінжинірингу буде разючий прорив в ефективності функціонування.</p>\\n<p>Радикальне перетворення передбачає звернення до першопричин речей. Отже, реінжиніринг – це не поліпшення існуючого положення речей, не проведення часткових змін чи перестановок в середині існуючих систем функціонування організації. Реінжиніринг це відмова від того, що було раніше, новий винахід того, як робота повинна бути виконана зараз.</p>\\n<p>Під «бізнес–процес» розуміють групу взаємозалежних завдань, що спільно створюють цінність для споживача. Для споживача не має значення яким чином всередині підприємства організовано виконання тих або інших завдань/робіт, споживачу важлива лише та цінність, яку він отримує у вигляді продукту або послуг. У традиційній організації процеси, проходячи через численні організаційні підрозділи, є фрагментовані, приховані і по суті некеровані. Проте процеси є першоосновою організації, засобом створення цінності для споживачів.</p>\\n<p>РБП втілюється стрімко та масштабно, вертикально, згори вниз по організаційній структурі та дає можливість радикального поновлення отримання результату за рахунок\\nстворення нових технологій бізнес–процесів. Рушійною силою реінжинірингу є розуміння потреб клієнта підприємства, тобто погляд на підприємство з позиції клієнта. Завдяки такому підходу проектуються нові процеси, які раніше не існували в організації.\\nДо цілей реінжинірингу бізнес–процесів відносять:</p>\\n<ul>\\n<li>суттєве підвищення ступеня задоволеності споживача, враховуючи роботу з клієнтом у режимі 24 на 365 та орієнтацію на його сьогоденні та майбутні потреби;</li>\\n<li>радикальне скорочення тривалості виробничого циклу, докорінне зменшення кількості процесів та їх вартості, різке зниження витрат часу на виконання функцій;</li>\\n<li>значне поліпшення процесу управління якістю;</li>\\n<li>підвищення ролі рішень та ініціативи кожного окремого працівника, організація групової роботи;</li>\\n<li>різке зниження кількості працівників;</li>\\n<li>забезпечення прискореного впровадження нових технологій;</li>\\n<li>забезпечення адаптації підприємства до функціонування в умовах інформаційного суспільства і «суспільства знань».</li>\\n</ul>\\n<h4 id=\\\"-24\\\">ЗАВДАННЯ ПС24</h4>\\n<h5 id=\\\"-\\\">Основні напрямки управління ЖЦ ІТ</h5>\\n<p>Існують різні підходи до управління ЖЦ ІТ (в тому числі і ПЗ). Спочатку визначаються три основні фази життєвого циклу у вигляді таких видів діяльності:</p>\\n<ul>\\n<li>етап планування,</li>\\n<li>етап розробки,</li>\\n<li>етап експлуатації.</li>\\n</ul>\\n<p>На етапі планування. На цьому етапі визначається пріоритет ІТ порівняно з іншими можливостями для бізнес–інвестицій, визначаються нові ІТ–проекти та пріоритети між окремими ІТ проектами. Також аналізуються дані про поточний стан операційних систем, що є важливим вкладом у цю діяльність. Як добре виконують операційні системи свої функції, оцінюється якість та розраховується оціночний ефект від поліпшень На цьому етапі визначаються моделі ЖЦ та особливості їхнього застосування.</p>\\n<p>На етапі розробки реалізуються пріоритетні пропозиції, будується і апробується ІТ. Розроблення означає реалізацію списку пріоритетних пропозицій. Для цього потрібні певні ресурси розробників, які досконало володіють будь–якими технологіями та добре орієнтуються в бізнес–сфері користувачів (останні визначають, що їм потрібно). Для відстеження витрат і переваг розробляємих ІС слід керувати такими заходами:</p>\\n<ol>\\n<li>Управління витратами шляхом активного управління ресурсами.</li>\\n<li>Управління вигодами через активне управління функціональністю ІТ, які розробляються.</li>\\n<li>Управління графіком часу.</li>\\n</ol>\\n<p>На цьому етапі згодом розробляються пріоритетні пропозиції щодо побудови, тестування та впровадження.\\nНа етапі експлуатації інформаційні системи знаходяться в стадії функціонування та підтримуються виробником.</p>\\n<p>Усі три етапи мають свої типові проблеми з витратами та вигодами для того, щоб налагодити їх ефективне управління.</p>\\n<p>Управління ЖЦ програмного продукту може бути спрямовано на реалізацію різних переваг, зокрема: </p>\\n<ul>\\n<li>зниження ризику: зменшення обсягу непотрібної та неактуальної інформації, створення інформації, якою легше керувати та виявляти;</li>\\n<li>економія витрат: витрати на зберігання та правове утримання можна зменшити за рахунок кращого управління інформацією;</li>\\n<li>більш ефективне управління: бізнес може запровадити чіткість управління та контроль.</li>\\n</ul>\\n<h4 id=\\\"-25\\\">ЗАВДАННЯ ПС25</h4>\\n<h5 id=\\\"-\\\">Альтернативні топології інтеграції ІС</h5>\\n<p>Існують три альтернативні топології інтеграції: 1) точка–точка (Point – to – Point); 2) шлюз (hub – and – spoke); 3) шина (Bus).</p>\\n<p>У топології «точка–точка» усі об&#39;єкти мають прямі зв&#39;язки один з одним. Кожен зв&#39;язок можна реалізувати будь–яким способом. Варіанти реалізації залежать від вимог і характеристик взаємодії між об&#39;єктами. До недоліків топології можна віднести такі характеристики: недостатня гнучкість; складність підтримки численних з&#39;єднань «точка–точка»; зміни одного об&#39;єкту впливають на об&#39;єкти, що залишилися; логіка маршрутизації часто програмується в коді об&#39;єктів; відсутність загальної моделі безпеки; використання різних API; низька надійність; складність створення фреймворків і підтримки асинхронної взаємодії.</p>\\n<p>Для скорочення числа використовуваних інтерфейсів слід використати топологію із загальним шлюзом або топологію із загальною шиною Такі моделі інтеграції реалізуються на рівні проміжного ПЗ.</p>\\n<p>Наступним кроком в розробці інтеграційної архітектури можна вважати появу корпоративної сервісної шини (Enterprise Service Bus – ESB).\\nESB дозволяє проводити як внутрішню, так і зовнішню інтеграції, і є шиною, працюючою як слабко–зв’язна система, керована подіями. Концепції сервісно–орієнтованої архітектури (СОА) і ESB сильно пов&#39;язані. ESB підтримує принцип реалізації СОА: розділення служби подання та її реалізації.</p>\\n<p>Функції ESB: надання інтерфейсів взаємодії; відправка і маршрутизація повідомлень; перетворення даних; реакція на події; управління політиками; віртуалізація. На підставі функцій ESB можна сформувати типовий список вимог, які пред&#39;являють користувачі: велика пропускна спроможність; підтримка декількох стилів інтеграції; забезпечення можливості додаткам працювати з сервісами як безпосередньо, так і через адаптери. ESB є, по суті, логічним компонентом архітектури, що приводить інтеграційну інфраструктуру у відповідність принципу СОА. Архітектурою, побудованою за принципом ESB, складніше управляти, але вона гнучкіша і масштабована (впровадження СОА не потребує змін в усіх елементах системи, внаслідок чого зможе відбуватися поетапно). Можна подати ESB у вигляді п&#39;ятирівневої структури:</p>\\n<p>1) рівень сполучення (адаптери та інтерфейси); \\n2) транспортна підсистема;\\n3) рівень реалізації бізнес–логіки;\\n4) рівень управління бізнес–процесами;\\n5) рівень бізнес–управління.</p>\\n<h4 id=\\\"-26\\\">ЗАВДАННЯ ПС26</h4>\\n<h5 id=\\\"-\\\">Принцип проектування Дружній інтерфейс</h5>\\n<p>При розробці інтерфейсу необхідно дотримуватися таких принципу дружнього інтерфейсу . Дружній інтерфейс (принцип «пробачення» користувачу). Користувачі зазвичай вивчають особливості роботи з новим програмним продуктом методом проб і помилок. Ефективний інтерфейс повинен враховувати це. На кожному етапі роботи він повинен дозволяти тільки відповідний набір дій і попереджати користувачів про ситуації, де вони можуть нашкодити системі або даним; найкраще надати користувачу можливість скасувати або виправити виконані дії.</p>\\n<p>Навіть при наявності добре спроектованого інтерфейсу користувачі можуть робити ті чи інші помилки. Ці помилки можуть бути як «фізичного» типу (випадковий вибір неправильної команди або даних), так і «логічного» (прийняття неправильного рішення щодо вибору команди або даних).</p>\\n<p>Ефективний інтерфейс повинен запобігати ситуаціям, які, ймовірно закінчаться помилками та вміти адаптуватися до потенційних помилок користувача і полегшувати йому процес усунення наслідків таких помилок.</p>\\n<h4 id=\\\"-27\\\">ЗАВДАННЯ ПС27</h4>\\n<h5 id=\\\"-\\\">Каскадна модель ЖЦ ПЗ</h5>\\n<p>Модель життєвого циклу (ЖЦ) – це структура яка містить процеси, дії та завдання, що здійснюються під час розробки, функціонування та супроводу програмного продукту протягом усього життя системи (від визначення вимог до завершення використання такої системи). Існуючі моделі ЖЦ визначають порядок виконання етапів у процесі створення ІС, а також критерії переходу від етапу до етапу. Найбільшого поширення набули каскадна модель, поетапна ітераційна модель з проміжним контролем та спіральна модель.\\nУ 1970 р. експерт в галузі ПЗ Уїнстон Ройс опублікував статтю, в якій виклав думки про методику «моделі водоспаду» (waterfall model), або «каскадну модель» (рис. 7.1). Ця модель згодом була регламентована множиною нормативних документів, зокрема, стандартом Міністерства оборони США Dod–STD–2167A.</p>\\n<p>До принципових властивостей «чистої» каскадної моделі відносять наступне:</p>\\n<ul>\\n<li>фіксація вимог до системи до часу її здачі замовнику;</li>\\n<li>перехід на чергову стадію проекту відбувається тільки після того, як повністю завершена робота на поточній стадії, без повернень на пройдені стадії.</li>\\n</ul>\\n<p>Кожна стадія закінчується отриманням результатів, які служать вихідними даними для наступної стадії та випуском комплекту документації, достатнього для того, щоб розробку можна було продовжити іншою командою розробників.</p>\\n<p>Вимоги до ПЗ, яке розробляється, визначені на стадії формування вимог, чітко документуються у вигляді технічного завдання і фіксуються на весь час розробки проекту. Узгодження отриманих результатів з користувачами проводиться тільки в точках, запланованих після завершення кожної стадії (при цьому можливе лише коригування результатів по зауваженнях користувачів, якщо вони не зачіпають вимоги, викладені в технічному завданні). Отже, користувачі можуть внести суттєві зауваження тільки після того, як робота над системою буде повністю завершена. У разі неточного викладу вимог або їх зміни протягом тривалого періоду створення ПЗ користувачі отримують систему, яка не задовольняє їх потребам. В результаті доводиться розпочинати новий проект, який може спіткати така ж доля.</p>\\n<p>Перевагами застосування каскадної моделі є:</p>\\n<ul>\\n<li>формування на кожній стадії закінченого набору проектної документації, який відповідає критеріям повноти та узгодженості;</li>\\n<li>можливість планувати час завершення всіх робіт та відповідних витрати, адже стадії робіт виконуються в логічній послідовності.</li>\\n</ul>\\n<p>Каскадну модель можна використати при створенні ПЗ, для якого на початку розробки можна точно і повно сформулювати всі вимоги. До цієї групи належать складні системи з великою кількістю завдань обчислювального характеру, системи управління виробничими процесами підвищеної небезпеки.\\nНедоліками застосування каскадного підходу є:</p>\\n<ul>\\n<li>запізніле виявлення проблем;</li>\\n<li>відхід від календарного графіка, запізнення з отриманням результатів;</li>\\n<li>надлишкова кількість документації;</li>\\n<li>неможливість розбити систему на частини (весь продукт розробляється за один раз); </li>\\n<li>високий ризик створення системи, що не задовольняє зміненим потребам\\nкористувачів.</li>\\n</ul>\\n<p>Реальний процес створення ПЗ не можливо повністю укласти в чітку схему, зазвичай,\\nвін носить ітераційний характер, а результати чергової стадії часто викликають зміни в проектних рішеннях, вироблених на більш ранніх стадіях. Отже, постійно виникає потреба в поверненні до попередніх стадій, в уточненні або перегляді раніше прийнятих рішень, тому зараз зустріти приклад каскадної моделі дуже важко.</p>\\n<h4 id=\\\"-28\\\">ЗАВДАННЯ ПС28</h4>\\n<h5 id=\\\"-\\\">Цілі та обмеження для переходу від завдань бізнесу до вимог для елементів системи</h5>\\n<p>Помилка в постановці цілі бізнес-процесу приводить до його невірного аналізу і як наслідок до прорахунків у формуванні вимог до проектованої інформаційної системи. Ціль це по суті планований результат, вона визначає підсумок того що має бути, але майже не каже яким чином це має бути досягнуто. Для досягнення цілі необхідно виконати деякі дії. Дію, що направлена на досягнення цілі називають задачею. Кінцевий результат процесу має певні вимоги до продукту процесу. Бізнес-ціль процесу полягає в отриманні економічного ефекту від відповідного виду діяльності.</p>\\n<p>Проектування ІС завжди розпочинається із визначення мети проекту, яку у загальному вигляді можна визначити як вирішення ряду взаємопов&#39;язаних завдань, що включають в себе забезпечення запуску системи, її експлуатацію протягом певного часу. Необхідно визначити функціональність системи та рівень її адаптивності до постійно змінюваних умов функціонування. Необхідно визначити пропускну спроможність системи та визначити необхідний час реакції системи на запит. Потрібно потурбуватися про безвідмовну роботу системи та визначити необхідний рівень безпеки. Важливим також буде питання простоти експлуатації та підтримки системи.</p>\\n<p>На етапі проектування перш за все формуються моделі даних. Проектувальники в якості вихідної інформації отримують результати аналізу. Побудова логічної і фізичної моделей даних є основною частиною проектування бази даних. Отримана в процесі аналізу інформаційна модель спочатку перетвориться в логічну, а потім у фізичну модель даних. Паралельно із проектуванням схеми бази даних виконується проектування процесів, щоб отримати специфікації (опис) всіх модулів ІС. Обидва ці процесу проектування тісно пов&#39;язані, оскільки частина бізнес–логіки зазвичай реалізується в базі даних (обмеження, тригери, збережені процедури). Головна мета проектування процесів полягає у відображенні функцій, отриманих на етапі аналізу, в модулі ІС. При проектуванні модулів визначають інтерфейси програм: розмічають меню, вигляд вікон, гарячі клавіші і пов&#39;язані з ними виклики.</p>\\n<p>Кінцевими продуктами етапу проектування є: </p>\\n<ul>\\n<li>схема бази даних (на підставі моделі, розробленої на етапі аналізу);</li>\\n<li>набір специфікацій модулів системи (вони будуються на базі моделей функцій).</li>\\n</ul>\\n<p>На етапі проектування здійснюють також розробку архітектури ІС, яка включає в себе вибір платформи і операційної системи. У неоднорідній ІС можуть працювати кілька комп&#39;ютерів на різних апаратних платформах і під управлінням різних операційних систем. Крім вибору платформи на етапі проектування визначаються такі характеристики архітектури: чи буде це архітектура «файл–сервер» або «клієнт–сервер»; чи буде це трирівнева архітектура з такими шарами: сервер, ПЗ проміжного шару (сервер додатків), клієнтське ПЗ; чи буде база даних централізованою або розподіленою: якщо база даних буде розподіленою, то які механізми підтримки узгодженості та актуальності даних будуть використані; чи буде база даних однорідною, тобто, чи будуть всі сервери баз даних продуктами одного і того ж виробника (наприклад, всі сервери тільки Oracle). Якщо база даних не буде однорідною, то яке ПЗ буде використано для обміну даними між СУБД різних виробників; чи будуть для досягнення належної продуктивності використовуватися паралельні сервери БД.</p>\\n<h4 id=\\\"-29\\\">ЗАВДАННЯ ПС29</h4>\\n<h5 id=\\\"-allfusion-process-management-suite\\\">Комплекс AllFusion Process Management Suite</h5>\\n<p>AllFusion Process Management Suite - управління процесами та проектами розробки ПЗ\\nAllFusion Process Management Suite (раніше: Process Continuum) - пакет інтегрованих засобів управління процесами та проектами, що дозволяють планувати та контролювати різні набори проектів та ресурсів. Створений для забезпечення безперервного вдосконалення процесу AllFusion Process Management Suite полегшує спільну роботу команди, розподіл ресурсів та керівництво проектами корпоративного масштабу. Ця функціональність підтримується за рахунок набору бібліотек, що містять найкращі методики світового досвіду.</p>\\n<p>AllFusionProcess Management Suite дозволяє організаціям використовувати як зразки індивідуальний досвід фахівців і, таким чином,\\nшвидко виявляти області, які потребують покращення. AllFusionProcess Management Suite забезпечує повний контроль, дозволяючи організації: </p>\\n<ul>\\n<li>Підвищити продуктивність на основі кращих зразків, широко\\nвикористовуючи певні типи проектів, починаючи від web-додатків і закінчуючи програмами для мейнфреймів. Це дозволяє організаціям підвищити загальний рівень компетентності та прискорити процес розробки, використовуючи навички та досвід фахівців як нові зразки та дозволяючи менеджерам послідовно застосовувати їх у всіх галузях діяльності підприємства.</li>\\n<li>Прискорити час розробки продукції, забезпечуючи команді розробників можливість постійно підвищувати продуктивність і швидше створювати якісні програми, ґрунтуючись на попередньому досвіді та повторному використанні успішних методів. Зразки, засновані на накопиченому в організації досвіді, можуть бути включені до бібліотек, що збільшить обсяг документованих знань та знизить витрати на навчання.</li>\\n<li>Зменшити вартість розробки, забезпечуючи керівникам проектів можливість ефективно прогнозувати потреби, розставляти пріоритети у завданнях розробки та розподіляти ресурси відповідно до проектних потреб у масштабах усього підприємства. Змінюючи з часом пріоритети та використовуючи гнучке розподіл ресурсів, компанії можуть значно знизити вартість розробки.</li>\\n<li>Підвищити якість протягом усього процесу, забезпечуючи керівникам проектів можливість фіксувати критичні дані, порівнюючи фактичне виконання проекту із запланованим. Отримані дані можуть порівнюватися з попередніми результатами щодо продуктивності, вартості, якості, ефективності, навичок та досвіду персоналу. Накопичені знання дозволяють організаціям підвищити загальну продуктивність процесу розробки додатків та якість продукції, що виробляється.</li>\\n<li>Здійснювати більш ефективну взаємодію через інтерфейс AllFusionProcess Management Suite з додатком AD visor компанії CA. Кожен співробітник, зайнятий у проекті, автоматично отримує інформацію про призначені завдання на власній веб-сторінці. Web-інтерфейс надає ясні та короткі описи завдань, список виконавців та терміни виконання. Крім того, менеджери мають доступ до кожного проекту підприємства, а також доступу до критично важливої інформації в режимі реального часу.</li>\\n</ul>\\n<h4 id=\\\"-30\\\">ЗАВДАННЯ ПС30</h4>\\n<h5 id=\\\"-\\\">Фреймворки Класифікація</h5>\\n<p>Фреймворки класифікують за такими ознаками:</p>\\n<ol>\\n<li>За місцем використання. </li>\\n</ol>\\n<p>Інфраструктурні фреймворки (System Infrastructure Frameworks) спрощують процес розробки інфраструктурних елементів, застосовуються усередині організації і не продаються. Фреймворки\\nрівня проміжного ПЗ (Middleware Frameworks) застосовують для під’єднання додатків. Фреймворки, орієнтовані на додатки, використовуються для підтримки систем, орієнтованих на роботу з кінцевими користувачами в конкретній предметній області. Архітектурний фреймворк визначається як «сукупність угод, принципів і практик, використовуваних для опису архітектури та прийнятих стосовно деякого предметного домена і (або) в співтоваристві фахівців (зацікавлених осіб)». [5 c. 103]. Він включає опис зацікавлених осіб, типові проблеми предметної області, архітектурні точки зору і методи їх інтеграції.</p>\\n<ol start=\\\"2\\\">\\n<li>За способом використання. </li>\\n</ol>\\n<p>Фреймворки, використовувані за принципом білого ящика: механізмами формування основних елементів додатка тут виступають методи спадковості та динамічного зв&#39;язування; такі фреймворки визначаються через інтерфейси об&#39;єктів, які додаються в систему; для роботи з ними потрібна детальна інформація про класи, які потрібно розширити. Фреймворки, які функціонують за принципом чорного ящика (або фреймворки, керовані даними): основними механізмами формування додатків тут виступають композиція і параметризація, при цьому функціональність забезпечується додаванням додаткових компонентів. На практиці застосовують підхід сірого ящика, що є комбінацією обох підходів.</p>\\n<ol start=\\\"3\\\">\\n<li>За масштабом використання. </li>\\n</ol>\\n<p>Фреймворки рівня застосунків подають функціонал по реалізації типових застосувань (GUI, бази даних тощо). Фреймворки рівня домена застосовуються для створення додатків в певній предметній області. Допоміжні фреймворки (Support Frameworks) застосовуються для вирішення конкретних завдань.</p>\\n<h4 id=\\\"-31\\\">ЗАВДАННЯ ПС31</h4>\\n<h5 id=\\\"-\\\">Програмна інженерія</h5>\\n<p>Програмна інженерія - покоління процесів розробки ПЗ 80–90–і рр. ХХ ст. Організації використовують відтворювані процеси і готові інструменти, а більшість створюваних компонентів (&gt;70%) пишеться на мовах високого рівня. Деякі компоненти (&lt;30%) стають доступними в якості комерційного продукту, включаючи операційні системи, системи управлянні базами даних (СУБД), мережеве ПЗ і графічний інтерфейс користувача.</p>\\n<p>У 1980–х рр. деякі організації починають досягати економії при великих масштабах, однак зі зростанням складності застосунків (особливо при переході до розподілених систем) існуючі мови, методи і технології виявилися недостатніми для того, щоб підтримувати необхідний рівень промислового створення систем.</p>\\n<h4 id=\\\"-32\\\">ЗАВДАННЯ ПС32</h4>\\n<h5 id=\\\"-erwin\\\">Засіб ERwin</h5>\\n<p>Група продуктів ERwin є набором засобів концептуального моделювання даних, які використовують метод IDEF1X. ERwin реалізує проектування схеми БД, генерацію її опису на мові цільової СУБД (Oracle, Sybase, DB2, Microsoft SQL Server тощо) і реверсний інжиніринг існуючої БД. ERwin випускається в декількох конфігураціях, орієнтовані на найпоширеніші засоби розробки додатків.</p>\\n<h4 id=\\\"-33\\\">ЗАВДАННЯ ПС33</h4>\\n<h5 id=\\\"-\\\">Методи за ступенем адаптивності проектних рішень</h5>\\n<p>За ступенем адаптивності проектних рішень розрізняють такі методи: </p>\\n<ul>\\n<li>реконструкції, коли адаптація проектних рішень виконується шляхом переробки відповідних компонентів (перепрограмування програмних модулів); </li>\\n<li>параметризації, коли проектні рішення налаштовуються (перегенеруються) відповідно до змін параметрів; </li>\\n<li>реструктуризації моделі, коли змінюється модель проблемної області, на основі якої автоматично перегенеруються проектні рішення.</li>\\n</ul>\\n<h4 id=\\\"-34\\\">ЗАВДАННЯ ПС34</h4>\\n<h5 id=\\\"-\\\">Фреймворк Захмана</h5>\\n<p>Фреймворк Захмана був створений співробітником компанії IBM Джоном Захманом (John Zachman), який заклав в основу свого фреймворка таку класифікацію (таксономію) артефактів системи: дані, функціональність, моделі, специфікації, документи. Цей фреймворк можна вважати онтологією верхнього рівня, яка описує конкретну систему.</p>\\n<p>Для побудови таксономії Захманом запропоновано відповісти на шість питань про функціонування організації: що, як, де, хто, чому. Ці питання відносяться до таких аспектів системи:</p>\\n<ul>\\n<li>використовувані дані (що?);</li>\\n<li>процеси і функції (як?);</li>\\n<li>місця виконання процесів (де?);</li>\\n<li>організації і персоналії (хто?);</li>\\n<li>події (коли?), які управляють;</li>\\n<li>цілі та обмеження, які визначають роботу системи (чому?).</li>\\n</ul>\\n<p>Відповідати на ці питання необхідно з різною мірою деталізації. Описано шість рівнів:</p>\\n<ul>\\n<li>рівень контексту; </li>\\n<li>рівень бізнес–описів; </li>\\n<li>системний рівень; </li>\\n<li>технологічний рівень; </li>\\n<li>технічний рівень; </li>\\n<li>рівень реальної системи. </li>\\n</ul>\\n<p>Для кожного рівня деталізації існує своя зацікавлена особа (точка зору):</p>\\n<ul>\\n<li>аналітики (рівень контексту);</li>\\n<li>топ–менеджери (рівень бізнес–описів);</li>\\n<li>архітектори (системний рівень);</li>\\n<li>розробники (технологічний рівень);</li>\\n<li>адміністратори (технічний рівень);</li>\\n<li>користувачі (рівень реальної системи). </li>\\n</ul>\\n<p>За результатами виконаних дій формується матриця розміром 6×6, в кожній комірці якої розташовуються артефакти. Для заповнення комірок введені такі правила:</p>\\n<ol>\\n<li>Колонки можна міняти місцями, але не можна їх додавати і видаляти.</li>\\n<li>Кожному стовпчику відповідає власна модель. Кожна відповідна модель повинна бути унікальною.</li>\\n<li>Кожен рівень (рядок) є описом системи з точки зору групи користувачів (подає окремий різновид).</li>\\n<li>Кожна комірка є унікальною та містить опис аспекту реалізації системи у вигляді моделі і текстового документу. </li>\\n</ol>\\n<p>Заповнення комірок виконується послідовно зверху вниз.</p>\\n<ul>\\n<li>Перший рядок матриці визначає контекст усіх інших та є загальним поглядом на організацію. </li>\\n<li>Другий рядок описує функціонування організації у бізнес–термінах. </li>\\n<li>Третій рядок описує бізнес–процеси в термінах ІС. </li>\\n<li>Четвертий рядок дозволяється розподілити ці бізнес–процеси і виконувані над ними операції між конкретними апаратними і програмними платформами. </li>\\n<li>П&#39;ятий рядок описує конкретні моделі устаткування, мережеві топології і програмний код. </li>\\n<li>Шостий рядок описує готову систему у вигляді керівництва користувачів, довідкових баз даних тощо.</li>\\n</ul>\\n<p>Стовпчик використовуваних даних, відповідно до рівнів, містить у своїх комірках такі артефакти:</p>\\n<ul>\\n<li>1 рівень – список основних сутностей; </li>\\n<li>2 рівень – семантична модель; </li>\\n<li>3 рівень – нормалізована модель;</li>\\n<li>4 рівень – фізична модель даних або ієрархія класів;</li>\\n<li>5 рівень – опис моделі на мові управління даними;</li>\\n<li>6 рівень – фактичні набори даних, статистики тощо.</li>\\n</ul>\\n<p>Стовпчик процеси і функції описує порядок дій для деталізації процесу\\nпереходу від місії організації до опису конкретних операцій:</p>\\n<ul>\\n<li>1 рівень – перерахування ключових бізнес–процесів;</li>\\n<li>2 рівень – опис бізнес–процесів;</li>\\n<li>3 рівень – опис операцій над даними та архітектури додатків; </li>\\n<li>4 рівень – методи класів;</li>\\n<li>5 рівень – програмний код; </li>\\n<li>6 рівень – виконувані модулі.</li>\\n</ul>\\n<p>З четвертого рівня розгляд ведеться у межах окремих застосувань. Стовпчик місця виконання процесів визначає розташування компонент системи і мережеву інфраструктуру:</p>\\n<ul>\\n<li>1 рівень – розташування основних об&#39;єктів;</li>\\n<li>2 рівень – модель взаємодії об&#39;єктів;</li>\\n<li>3 рівень – розподіл компонентів ІС по вузлах мережі;</li>\\n<li>4 рівень – фізична реалізація на апаратних і програмних платформах;</li>\\n<li>5 рівень – використовувані протоколи і специфікації каналів зв&#39;язку;</li>\\n<li>6 рівень – опис функціонування мережі.</li>\\n</ul>\\n<p>Стовпчик організації і персоналії визначає учасників процесу\\nфункціонування:</p>\\n<ul>\\n<li>1 рівень – список партнерів, підрозділів організації, виконувані функції;</li>\\n<li>2 рівень – повна організаційна діаграма (можуть бути присутніми вимоги до інформаційної безпеки);</li>\\n<li>3 рівень – учасники бізнес–процесів та їх ролі;</li>\\n<li>4 рівень – вимоги до призначених для користувача інтерфейсів; </li>\\n<li>5 рівень – правила доступу до об&#39;єктів;</li>\\n<li>6 рівень – фізична реалізація в коді.</li>\\n</ul>\\n<p>Стовпчик подія, яка управляє, визначає часові параметри системи і бізнес–процесів:</p>\\n<ul>\\n<li>1 рівень – список значимих для системи подій;</li>\\n<li>2 рівень – базовий графік робіт; </li>\\n<li>3 рівень – моделі роботи з подіями;</li>\\n<li>4 рівень – алгоритми обробки подій; </li>\\n<li>5 рівень – програмна реалізація;</li>\\n<li>6 рівень – історія функціонування системи.</li>\\n</ul>\\n<p>Стовпчик цілі та обмеження вказує послідовність дій для переходу від\\nзавдань бізнесу до вимог для елементів системи:</p>\\n<ul>\\n<li>1 рівень – бізнес–стратегія; </li>\\n<li>2 рівень – дерево цілей і бізнес–план;</li>\\n<li>3 рівень – правила та обмеження для бізнес–процесів;</li>\\n<li>4 рівень – додатки, які включаються до складу системи;</li>\\n<li>5 рівень – алгоритми роботи додатків;</li>\\n<li>6 рівень – фізична реалізація у коді.</li>\\n</ul>\\n<p>За допомогою фреймворка Захмана не можна описати динаміку поведінки\\nсистеми (її розвиток), крім того, в ньому не існує механізму контролю за змінами. Цей фреймворк розповсюджують на комерційній основі.</p>\\n<h4 id=\\\"-35\\\">ЗАВДАННЯ ПС35</h4>\\n<h5 id=\\\"-\\\">Особливості сучасні технологічні процеси</h5>\\n<p>Сучасні технологічні процеси є «важкими» і мають такі особливості:</p>\\n<p>1) необхідність документувати кожну дію розробників;\\n2) наявність робочих продуктів (в першу чергу – документів), які створюються в бюрократичній атмосфері;\\n3) відсутність гнучкості;\\n4) детермінованість (довгострокове детальне планування і передбачува– ність всіх видів діяльності, а також розподіл людських ресурсів на тривалий термін часу).</p>\\n<h4 id=\\\"-36\\\">ЗАВДАННЯ ПС36</h4>\\n<h5 id=\\\"-rup\\\">Статичний аспект технології RUP</h5>\\n<p>Статичний аспект RUP складається з чотирьох основних елементів: </p>\\n<ul>\\n<li>ролі;</li>\\n<li>види діяльності;</li>\\n<li>робочі продукти;</li>\\n<li>дисципліни.</li>\\n</ul>\\n<p>Поняття «роль» визначає поведінку та відповідальність особи або групи осіб, які формують команду проекту. Одна особа може грати в проекті різні ролі. Під діяльністю конкретного виконавця розуміють одиницю виконуваної ним роботи. Різновид діяльності відповідає поняттю технологічної операції, він має чітко визначену мету, яку зазвичай виражають в термінах отримання або модифікації деяких робочих продуктів.</p>\\n<p>Кожен вид діяльності пов&#39;язаний з конкретною роллю, а тривалість виду діяльності становить від декількох годин до декількох днів і зазвичай виконується одним виконавцем та породжує один робочий продукт (або їх невелику кількість). Будь–який вид діяльності повинен бути елементом процесу планування та супроводжується набором керівництв, які мають вигляд методики виконання технологічних операцій.</p>\\n<p>Дисципліна відповідає поняттю технологічного процесу і має вигляд послідовності дій, яка приводить до отримання відчутного результату.\\nВ рамках RUP було визначено шість основних дисциплін — побудова бізнес–моделей, визначення вимог, аналіз і проектування, реалізація, тестування, розгортання та три допоміжні — управління конфігурацією та змінами, управління проектом, створення інфраструктури.</p>\\n<p>Продукт RUP входить до складу комплексу Rational Suite, і кожна з перерахованих вище дисциплін підтримується конкретним інструментальним засобом комплексу. Одним із основних інструментальних засобів комплексу Rational Rose є група об&#39;єктно–орієнтованих CASE–засобів, призначених для автоматизації процесів аналізу і проектування ПЗ, для генерації кодів на різних мовах і випуску проектної документації.</p>\\n<p>Rational Rose реалізує процес об&#39;єктно–орієнтованого аналізу та проектування ПЗ, описаний в RUР. В основі роботи Rational Rose лежить побудова діаграм та специфікацій UML, які визначають архітектуру системи, її статичні і динамічні аспекти. У складі Rational Rose можна виділити шість основних структурних компонентів: репозиторій, графічний інтерфейс користувача, засоби перегляду проекту (браузер), засоби контролю проекту, засоби збору статистики і генератор документів. До них додаються генератори кодів для кожної підтримуваної мови, склад яких змінюється від версії до версії.</p>\\n<p>Репозиторій є базою даних проекту, браузер забезпечує «навігацію» за проектом, включаючи переміщення по ієрархії класів і підсистем, переключення від одного виду діаграм до іншого тощо. Засоби контролю і збору статистики дають можливість знаходити та усувати помилки у міру розвитку проекту, а не після завершення його опису.</p>\\n<p>Генератор звітів формує тексти вихідних документів на основі інформації, яка міститься в репозиторії. Засоби автоматичної генерації коду, використовуючи інформацію, яку містять діаграми класів і компонентів, формують файли описів класів. Створюваний таким чином скелет програми можна уточнювати шляхом прямого програмування на відповідній мові. В результаті розробки проекту за допомогою Rational Rose формуються наступні документи: діаграми UML (зображують модель програмної системи, яку розробляють); специфікації класів, об&#39;єктів, атрибутів та операцій; заготовки текстів програм.</p>\\n<h4 id=\\\"-37\\\">ЗАВДАННЯ ПС37</h4>\\n<h5 id=\\\"-\\\">Модель корпоративної архітектури</h5>\\n<p>Побудова корпоративної архітектури підприємства, організації визначається використовуваними компонентами опису та його взаємозв&#39;язком. Приклад досить привабливої і водночас нескладної моделі може бути п&#39;ятирівневої корпоративна архітектура, де на верхньому рівні буде рівень стратегії (опис стратегії, цілей), потім рівень організаційної структури (послуги та зовнішні функції; внутрішні функції, що забезпечують виконання зовнішніх функцій та послуг; організаційні ланки; відповідності послуг та функцій організаційним ланкам), далі рівень бізнес-процесів та бізнес-проектів (у тому числі опис порядку виконання функцій) та рівень кількісних показників моделі (стратегічні показники діяльності організації, операційні показники ефективності бізнес-процесів та бізнес- проектів, бюджети) та рівень інформаційних технологій.</p>\\n<p>Фахівці визнають, що набір компонентів, що виділяються в корпоративній архітектурі, визначається «рівнем зрілості» в її розвитку і складом розв&#39;язуваних з її допомогою прикладних завдань. Для того щоб мати імідж привабливої та надійної компанії «поза межами», треба мати хорошу організацію та ефективну систему управління «всередині» Сьогодні компанії прагнуть уважно та якісно підходити до організації основних та підтримуючих процесів надання продуктів та послуг, до побудови управлінських процесів. У зв&#39;язку з цим визнається необхідність таких дій:</p>\\n<ul>\\n<li>розробка місії та стратегії компанії та використання їх як цілеспрямованих орієнтирів при налаштуванні та деталізації інших компонентів корпоративної архітектури;</li>\\n<li>адресне застосування сучасного арсеналу моделей організації діяльності інжинірингової компанії (функціональних моделей, процесних моделей, проектних моделей);</li>\\n<li>поділ та формування основних регламентів роботи за базовими рівнями системи управління компанією (корпоративного, стратегічного, операційного);</li>\\n<li>розробка та опис регулярних процедур роботи функціональних систем управління (фінанси та економіка, маркетинг, персонал тощо), а також систем управління основною діяльністю компанії, що здійснюється у формі процесів та проектів;</li>\\n<li>застосування у процесах діяльності та управління сучасних інформаційних технологій та спеціалізованих інформаційних систем управління;</li>\\n<li>точна адресна зв&#39;язка процесів виконання діяльності та процесів управління;</li>\\n<li>акуратне ув&#39;язування процесів управління та інтерфейсів процесів управління;</li>\\n<li>інтеграція процесів управління у межах комплексної системи управління;</li>\\n<li>виділення системи документообігу та прив&#39;язка її до інформаційних технологій;</li>\\n<li>документування та регламентація (у раціональному обсязі) описів способів\\nпровадження діяльності компанії;</li>\\n<li>застосування електронних моделей та електронних регламентів.</li>\\n</ul>\\n<h4 id=\\\"-38\\\">ЗАВДАННЯ ПС38</h4>\\n<h5 id=\\\"-\\\">Типові архітектури ІС</h5>\\n<ol>\\n<li>Традиційні архітектурні рішення, засновані на використанні виділених файлів–серверів або серверів баз даних.</li>\\n<li>Архітектури корпоративних ІС, які базуються на технології Internet (Intranet–додатки).</li>\\n<li>Архітектури ІС, які ґрунтуються на концепції «сховища даних» (DataWarehouse) – інтегрованого інформаційного середовища, що складається із різнорідних інформаційних ресурсів.</li>\\n<li>Для побудови глобальних розподілених інформаційних додатків використовується архітектура інтеграції інформаційно–обчислювальних компонентів на основі об&#39;єктно–орієнтованого підхід<h4 id=\\\"-39\\\">ЗАВДАННЯ ПС39</h4>\\n<h5 id=\\\"-\\\">Організаційна структура діяльності підприємства</h5>\\n</li>\\n</ol>\\n<p>Організаційна структура має вигляд сукупності організаційних одиниць, зазвичай, пов&#39;язаних ієрархічними і процесними відношеннями. Організаційна одиниця – це підрозділ, який зображує собою об&#39;єднання людей (персоналу) для виконання сукупності загальних функцій або бізнес– процесів. У функціонально–орієнтованій організаційній структурі організаційна одиниця виконує набір функцій, які відносяться до однієї функції управління і входять до різних процесів. У процесно–орієнтованій структурі організаційна одиниця виконує набір функцій, які входять в один тип процесу і відносяться до різних функцій управління.</p>\\n<p>На зовнішньому рівні будується структурна модель підприємства у вигляді ієрархії підпорядкування організаційних одиниць або списків взаємодіючих підрозділів. На концептуальному рівні для кожного підрозділу задається організаційно–штатна структура посад (ролей персоналу).</p>\\n<p>На внутрішньому рівні визначаються вимоги до прав доступу персоналу до функцій ІС, які підлягають автоматизації.</p>\\n<h4 id=\\\"-40\\\">ЗАВДАННЯ ПС40</h4>\\n<h5 id=\\\"-1-2-web-\\\">Назвіть 1) різновиди розподілених архітектур; 2) технології, які можна використовувати для побудови розподіленої архітектури Web–сервісу;основні інтеграційні підходи до розробки ІС.</h5>\\n<p>Існують три альтернативні топології інтеграції:</p>\\n<ul>\\n<li>точка–точка (Point – to – Point);</li>\\n<li>шлюз (hub – and – spoke);</li>\\n<li>шина (Bus).</li>\\n<li>У топології «точка–точка» усі об&#39;єкти мають прямі зв&#39;язки один з одним. Кожен зв&#39;язок можна реалізувати будь–яким способом. Варіанти реалізації залежать від вимог і характеристик взаємодії між об&#39;єктами. До недоліків топології можна віднести такі характеристики: недостатня гнучкість; складність підтримки численних з&#39;єднань «точка–точка»; зміни одного об&#39;єкту впливають на об&#39;єкти, що залишилися; логіка маршрутизації часто програмується в коді об&#39;єктів; відсутність загальної моделі безпеки; використання різних API; низька надійність; складність створення фреймворків і підтримки асинхронної взаємодії.\\nДля скорочення числа використовуваних інтерфейсів слід використати топологію із загальним шлюзом або топологію із загальною шиною. Такі моделі інтеграції реалізуються на рівні проміжного ПЗ.</li>\\n</ul>\\n<p>Існують такі основні типові інтеграційні підходи:</p>\\n<ul>\\n<li>«інтеграція на рівні даних;</li>\\n<li>інтеграція на рівні бізнес–функцій і бізнес–об&#39;єктів;</li>\\n<li>інтеграція на рівні бізнес–процесів; </li>\\n<li>портали.</li>\\n</ul>\\n<p><strong>Інтеграція на рівні даних</strong> передбачає наявність в системах баз даних, для роботи з якими необхідно розробити єдиний програмний інтерфейс. До основних технологічних рішень цього підходу відносять: системи реплікації даних; обласні бази даних; використання API для доступу до EPR– систем.</p>\\n<p>Реплікація є процесом синхронізації даних між різними джерелами. Необхідність в цьому виникає у момент зміни блоку інформації в розподілених системах зберігання, щоб гарантувати коректність і несуперечність даних, використовуваних в усіх модулях або додатках інформаційної системи. Зазвичай функції реплікації покладають на проміжне ПЗ.\\nОбласні (федеративні) бази даних надають єдиний інтерфейс до розподілених даних. Це забезпечує інтеграцію множини автономних даних, які можуть бути фізично розташовані на різних пристроях в мережі. Такі бази даних прийнято називати віртуальними.</p>\\n<p>Використання API для доступу до ERP–систем покликано спростити механізми обміну інформацією між призначеними для користувача застосунками і програмним забезпеченням, призначеним для управління функціонуванням виробничих ІС (ERP).</p>\\n<p><strong>Інтеграція на рівні бізнес–функцій і бізнес об&#39;єктів</strong> передбачає реалізацію спільно використовуваних служб (сервісів). Служба може бути набором функцій, який використовується в декількох застосунках. Цей набір служб і буде бізнес–функціями. При використанні сервісно–орієнтованої архітектури бізнес–функції можна розглядати як бізнес–сервіси, а при компонентному підході – як бізнес–об&#39;єкти (бізнес–компоненти).</p>\\n<p><strong>Інтеграція на рівні бізнес–процесів</strong> розрізняється залежно від рівня інтеграції. При внутрішній інтеграції взаємодіє велика кількість сервісів, а при зовнішній інтеграції – в основному два. Бізнес–процеси функціонують над виділеними службами, для управління якими існує спеціальна мова, що інтерпретується.</p>\\n<p><strong>Портали</strong> можна вважати графічними інтерфейсами бізнес–процесів, оскільки вони призначені для персоніфікованого доступу до інформації і консолідації даних з декількох джерел.</p>\\n<h4 id=\\\"-41\\\">ЗАВДАННЯ ПС41</h4>\\n<h5 id=\\\"-idef3-process-description-capture-\\\">Метод IDEF3 (Process Description Capture)</h5>\\n<p>IDEF3 (Process Description Capture) метод використовують для збору інформації про стан системи, що моделюється. Це – структурний метод, який показує причинно–наслідкові зв&#39;язки та події, а також як організована робота і які користувачі працюють системою. IDEF3 складається з таких двох методів:</p>\\n<ol>\\n<li>Process Flow Description: опис процесів з описом того, як організована робота між різними елементами системи, що моделюється.</li>\\n<li>Object State Transition Description: опис переходів станів об&#39;єктів з описом того, які існують проміжні стани у об&#39;єктів в системі, що моделюється.</li>\\n</ol>\\n<h4 id=\\\"-42\\\">ЗАВДАННЯ ПС42</h4>\\n<h5 id=\\\"-rup\\\">Технологія RUP</h5>\\n<p>Технолоія Rational Unified Process (RUP) це – програмний продукт, розроблений компанією Rational Software (<a href=\\\"http://www.rational.com)\\\">www.rational.com)</a>, яка входить до складу IBM. Технологія RUP в значній мірі відповідає стандартам і нормативним документам, пов&#39;язаним з процесами ЖЦ ПЗ, з оцінкою технологічної зрілості організацій–розробників (ISO 12207, ISO 9000, СММ та ін.). Основними принципами цієї технології є:</p>\\n<ol>\\n<li>Ітераційний та інкрементний (нарощуваний) підхід до створення ПЗ.</li>\\n<li>Планування та управління проектом на основі функціональних вимог до системи – варіантів використання.</li>\\n<li>Побудова системи на базі архітектури ПЗ.</li>\\n</ol>\\n<p>Перший принцип є визначальним. Відповідно до нього розробка системи виконується у вигляді декількох короткострокових міні–проектів фіксованої тривалості (від 2 до 6 тижнів), названих ітераціями. Кожна ітерація включає власні етапи аналізу вимог, проектування, реалізації, тестування, інтеграції та завершується створенням працюючої системи. Ітераційний цикл ґрунтується на постійному розширенні та доповненні системи в процесі декількох ітерацій з періодичним зворотним зв&#39;язком та адаптацією модулів, які додаються до існуючого ядра системи. Система постійно розростається крок за кроком, тому такий підхід називають ітераційним та інкрементним. При цьому підході виключена побудова моделей без зворотного зв&#39;язку.</p>\\n<h4 id=\\\"-43\\\">ЗАВДАННЯ ПС43</h4>\\n<h5 id=\\\"-\\\">Початкова стадія проекту та стадія розробки</h5>\\n<p><strong>Початкова стадія</strong> проекту та стадія розробки. Початкова стадія може приймати різні форми. Для великих проектів початкова стадія передбачає всебічне вивчення усіх можливостей реалізації проекту, що займе місяці. Під час її перебігу: </p>\\n<p>1) виробляється бізнес–план проекту: визначається скільки приблизно він буде коштувати та який дохід принесе; \\n2) визначається межа проекту, і виконується початковий аналіз для оцінки розмірів проекту.</p>\\n<p>Щоб виконати таку роботу, необхідно ідентифікувати всі зовнішні сутності (дійові особи), з якими система буде взаємодіяти, і визначити в найзагальнішому вигляді природу цієї взаємодії. При цьому мають на увазі ідентифікацію всіх варіантів використання та опис найбільш важливих з них. Бізнес–план включає критерії успіху, оцінку ризику, оцінку необхідних ресурсів і загальний план по стадіях, який включає дати основних контрольних точок.</p>\\n<p>Результатом початкової стадії є:</p>\\n<ul>\\n<li>загальний опис системи: основні вимоги до проекту, його характеристики та обмеження;</li>\\n<li>початкова модель варіантів використання (ступінь готовності – 10– 20%);</li>\\n<li>початковий проектний глосарій (словник термінів); – початковий бізнес–план;</li>\\n<li>план проекту, який відображає стадії та ітерації;</li>\\n<li>один або кілька прототипів.</li>\\n</ul>\\n<p>На стадії розробки більш детально визначають вимоги до системи, виконується високорівневий аналіз предметної області і проектування для побудови базової архітектури системи, створюється план конструювання та усуваються найбільш ризиковані елементи проекту.\\nРезультатом стадії розробки є:</p>\\n<ul>\\n<li>модель варіантів використання (завершена принаймні на 80%), яка визначає функціональні вимоги до системи;</li>\\n<li>перелік додаткових вимог, включаючи вимоги нефункціонального характеру і вимоги, не пов&#39;язані з конкретними варіантами використання;</li>\\n<li>опис базової архітектури майбутньої системи;</li>\\n<li>працюючий прототип;</li>\\n<li>уточнений бізнес–план;</li>\\n<li>план розробки всього проекту, який відображає ітерації та критерії оцінки для кожної ітерації.</li>\\n</ul>\\n<p>Найважливішим результатом стадії розробки є опис базової архітектури\\nмайбутньої системи, яка є основою всієї подальшої розробки. Ця архітектура включає: 1) модель предметної області, яка відображає розуміння бізнесу і служить відправним пунктом для формування основних класів предметної області; 2) технологічну платформу, яка визначає основні елементи технології реалізації системи та їх взаємодію.</p>\\n<p><strong>Стадія розробки</strong> займає близько п&#39;ятої частини загальної тривалості проекту. Основними ознаками завершення стадії розробки є дві події:\\n1) розробники в змозі оцінити з достатньо високою точністю, скільки часу потрібно на реалізацію кожного варіанту використання;\\n2) ідентифіковано всі найбільш серйозні ризики, а ступінь розуміння найважливіших з них така, що відомо, як впоратися з ними.\\nСутність планування полягає у визначенні послідовності ітерацій конструювання і варіантів використання, які реалізуються на кожній ітерації.</p>\\n<p>Планування завершується, коли визначено місце кожного варіанта використання на деякій ітерації та дата початку кожної ітерації.</p>\\n<h4 id=\\\"-44\\\">ЗАВДАННЯ ПС44</h4>\\n<h5 id=\\\"-\\\">Прогнозуюче планування проекту</h5>\\n<p>Метод водоспаду досі використовується через бажання забезпечити передбачуваність при створенні програмного забезпечення. Відсутність точної оцінки вартості створення програмного продукту та термінів його розробки дуже дратує.</p>\\n<p>Саме прогнозуючий підхід спрямований на виконання роботи на початковому етапі проекту, це допомагає краще зрозуміти, що потрібно робити в подальшому. Таким чином, настає момент, коли решту проекту можна оцінити з достатнім ступенем точності.</p>\\n<p>В процесі прогнозу планування проект розділяється на дві стадії: </p>\\n<ul>\\n<li>на першій стадії складаються плани (і тут прогнозувати важко); </li>\\n<li>друга стадія більш передбачувана, оскільки плани вже готові.</li>\\n</ul>\\n<p>Все ще тривають дискусії про те, чи багато проектів можуть бути передбачуваними. Одна з найбільш істотних причин складності програмних проектів полягає в труднощі розуміння вимог до програмних систем. У більшості програмних проектів вимоги піддаються істотному перегляду та зміні на пізніх стадії виконання проекту, а такий перегляд вщент розбиває основу прогнозів.</p>\\n<p>Наслідки перегляду можна запобігти, заморозивши вимоги на ранній стадії проекту і не дозволяючи з&#39;являтися змінам, але це призводить до ризику поставити клієнту систему, яка не задовольняє вимоги користувачів. Ця проблема призводить до двох різних варіантів дій: направити більше зусиль на опрацювання вимог; отримати більш визначену множину вимог, щоб скоротити можливі зміни.</p>\\n<p>Прихильники іншої школи стверджують, що перегляд вимог неминучий, що в багатьох проектах важко стабілізувати вимоги в такій мірі, щоб існувала можливість використовувати прогнозуюче планування. Це може бути або наслідком того, що важко уявити 1) що може робити програмний продукт, або 2) що умови ринку диктують непередбачувані зміни. Ця школа підтримує адаптивне планування відповідно до твердженням, що прогнозованість – це ілюзія.</p>\\n<p>Необхідно повернутися обличчям до реальності постійних змін і використовувати такий підхід у плануванні, при якому зміна в проекті вважається величиною постійною. Ця зміна контролюється таким чином, щоб в результаті виконання проекту поставлялося якомога краще ПЗ; але хоча проект і є контрольованим, передбачити його не можна.</p>\\n<p>На основі прогнозуючого плану можна розробити контракт з фіксованою функціональністю за фіксованою ціною. В такому контракті точно вказується, що має бути створено, скільки це коштує і коли продукт буде поставлений. Не потрібно складати прогнозуючий план, поки не отримано точні та коректні вимоги, які не піддадуться істотним змінам.</p>\\n<p>Якщо не можна отримати точні, коректні і стабільні вимоги, то використовуйте метод адаптивного планування. Передбачуваність та адаптивність передбачають вибір життєвого циклу: адаптивне планування має на увазі ітеративний процес, прогнозуючий план можна реалізувати будь–яким з двох способів, хоча за його виконанням легше спостерігати в разі застосування методу водоспаду, або методу поетапної поставки.</p>\\n<h4 id=\\\"-45\\\">ЗАВДАННЯ ПС45</h4>\\n<h5 id=\\\"-\\\">Структурна модель предметної області</h5>\\n<p>В основі проектування інформаційної системи (ІС) лежить моделювання предметної області, а для отримання адекватного предметній області проекту ІС у вигляді системи правильно працюючих програм, необхідно мати цілісне, системне уявлення про модель, що відобразить усі аспекти функціонування майбутньої ІС. Під моделлю предметної області за цих обставин розуміють деяку систему, що імітує структуру або функціонування досліджуваної предметної області та відповідає основній вимозі – бути їй адекватною.</p>\\n<p>Попереднє моделювання предметної області дозволяє скоротити час та терміни проведення проектних робіт і отримати більш ефективний та якісний проект. Без проведення моделювання предметної області велика ймовірність допущення помилок у вирішенні стратегічних питань, що призводять до економічних втрат і високих витрат при подальшому перепроектуванні системи. Внаслідок цього усі сучасні технології проектування ІС ґрунтуються на використанні методології моделювання предметної області.</p>\\n<p>До моделей предметних областей висувають наступні вимоги:</p>\\n<ul>\\n<li>формалізація, яка забезпечує однозначний опис структури предметної області;</li>\\n<li>зрозумілість для замовників і розробників на основі застосування графічних засобів відображення моделі;</li>\\n<li>реалізація, що передбачає наявність засобів фізичної реалізації моделі предметної області в ІС;</li>\\n<li>забезпечення оцінювання ефективності реалізації моделі предметної області на основі визначених методів та обчислюваних показників.</li>\\n</ul>\\n<p>Для реалізації цих вимог, можна побудувати систему моделей, що матиме на меті зобразити структурний та оцінний аспекти функціонування предметної області у вигляді підприємства чи організації.</p>\\n<p>Структурний аспект моделювання предметної області передбачає побудову:</p>\\n<ul>\\n<li>об&#39;єктної структури, що відобразить склад взаємодіючих у процесах матеріальних та інформаційних об&#39;єктів предметної області;</li>\\n<li>функціональної структури, що відобразить взаємозв&#39;язок функцій (дій) щодо перетворення об&#39;єктів в процесах;</li>\\n<li>структури управління, що відобразить події та бізнес–правила, що впливають на виконання процесів;</li>\\n<li>організаційної структури, що відобразить взаємодію організаційних одиниць підприємства і персоналу в процесах;</li>\\n<li>технічної структури, де буде описано топологію розташування та способи комунікації комплексу технічних засобів.</li>\\n</ul>\\n<p>Для відображення структурного аспекту моделей предметних областей зручно використовувати графічні методи документування, які повинні гарантувати подання інформації про компоненти системи. Графічні методи повинні забезпечувати можливість структурної декомпозиції специфікацій системи із максимальним ступенем деталізації і погоджень щодо описів на суміжних рівнях декомпозиції.</p>\\n<p>З моделюванням безпосередньо пов&#39;язана проблема вибору мови зображення проектних рішень, що дозволяє якомога більше залучати майбутніх користувачів системи до її розробки. Мова моделювання – це нотація, найчастіше графічна, яка використовується для опису проектів. Нотація є синтаксисом мови моделювання і має сукупність графічних об&#39;єктів, які використовуються в моделі.</p>\\n<p>Графічне зображення нерідко виявляється найбільш ємною формою подання інформації. Необхідно враховувати, що графічні методи документування не можуть повністю забезпечити декомпозицію проектних рішень від постановки задачі проектування до реалізації програм на комп’ютері і можливе виникнення труднощів при переході від етапу аналізу системи до етапу проектування та особливо до програмування.</p>\\n<p>Головним критерієм адекватності структурної моделі предметної області є функціональна повнота ІС, що розробляється.</p>\\n<h4 id=\\\"-46\\\">ЗАВДАННЯ ПС46</h4>\\n<h5 id=\\\"-\\\">Спіральна модель ЖЦ ПЗ</h5>\\n<p>Спіральна модель — робить наголос на початкових етапах ЖЦ (аналіз, проектування), а реалізація технічних рішень перевіряється та обґрунтовується за допомогою створення прототипів. Кожен виток спіралі (ітерація) відповідає поетапній моделі створення фрагмента або версії системи, на ньому уточнюються цілі й характеристики проекту, визначається його якість, плануються роботи наступного витка спіралі.</p>\\n<h4 id=\\\"-47\\\">ЗАВДАННЯ ПС47</h4>\\n<h5 id=\\\"-\\\">Етапи створення ІС</h5>\\n<p>Процес створення ІС охоплює ряд етапів, обмежених деякими часовими рамками і закінчується випуском конкретного продукту (моделей, програмних продуктів, документації тощо). Зазвичай виділяють такі етапи створення ІС: формування вимог до системи, проектування, реалізація, тестування, введення в дію, експлуатація та супровід.</p>\\n<p><strong>Початковим етапом</strong> процесу створення ІС є моделювання бізнес–процесів, які мають місце в організації/на підприємстві, реалізують її цілі та завдання. Модель організації, описана в термінах бізнес–процесів і бізнес– функцій, дозволяє сформулювати основні вимоги до ІС. Множина моделей опису вимог до ІС потім перетворюється в систему моделей, які описують концептуальний проект ІС. Формуються моделі архітектури ІС, вимог до ПЗ та інформаційного забезпечення (ІЗ). Потім формується архітектура ПЗ та ІЗ, виділяються корпоративні БД та окремі додатки, формуються моделі вимог до додатків і проводиться їх розробка, тестування та інтеграція.</p>\\n<p>Метою початкових етапів створення ІС, виконуваних на стадії аналізу діяльності організації, є формування вимог до ІС, які відображають цілі та завдання організації–замовника. Щоб специфікувати процес створення ІС, яка відповідає потребам організації, потрібно з&#39;ясувати і чітко сформулювати сутність цих потреб. Для цього необхідно визначити вимоги замовників до ІС і\\nвідобразити їх на мові моделей вимог до розробки проекту ІС так, щоб забезпечити відповідність цілям і задачам організації. Завдання формування вимог до ІС є одним із найвідповідальніших, важко формалізованих, найдорожчих і важких для виправлення в разі помилки.</p>\\n<p>Сучасні інструментальні засоби і програмні продукти дозволяють швидко створювати ІС відповідно готовим вимогам. Але найчастіше ці системи не задовольняють замовників, вимагають численних доробок, що призводить до різкого подорожчання вартості ІС. Основною причиною такого становища є неправильне, неточне або неповне визначення вимог до ІС на етапі аналізу.</p>\\n<p><strong>На етапі проектування</strong> перш за все формуються моделі даних. Проектувальники в якості вихідної інформації отримують результати аналізу. Побудова логічної і фізичної моделей даних є основною частиною проектування бази даних. Отримана в процесі аналізу інформаційна модель спочатку перетвориться в логічну, а потім у фізичну модель даних.\\nПаралельно із проектуванням схеми бази даних виконується проектування процесів, щоб отримати специфікації (опис) всіх модулів ІС. Обидва ці процесу проектування тісно пов&#39;язані, оскільки частина бізнес–логіки зазвичай реалізується в базі даних (обмеження, тригери, збережені процедури).</p>\\n<p>Головна мета проектування процесів полягає у відображенні функцій, отриманих на етапі аналізу, в модулі ІС. При проектуванні модулів визначають інтерфейси програм: розмічають меню, вигляд вікон, гарячі клавіші і пов&#39;язані з ними виклики.\\nКінцевими продуктами етапу проектування є:</p>\\n<ul>\\n<li>схема бази даних (на підставі моделі, розробленої на етапі аналізу);</li>\\n<li>набір специфікацій модулів системи (вони будуються на базі моделей функцій).</li>\\n</ul>\\n<p>На етапі проектування здійснюють також розробку архітектури ІС, яка\\nвключає в себе вибір платформи і операційної системи. У неоднорідній ІС\\nможуть працювати кілька комп&#39;ютерів на різних апаратних платформах і під\\nуправлінням різних операційних систем. Крім вибору платформи на етапі\\nпроектування визначаються такі характеристики архітектури:</p>\\n<ul>\\n<li>чи буде це архітектура «файл–сервер» або «клієнт–сервер»;</li>\\n<li>чи буде це трирівнева архітектура з такими шарами: сервер, ПЗ проміжного шару (сервер додатків), клієнтське ПЗ;</li>\\n<li>чи буде база даних централізованою або розподіленою: якщо база даних буде розподіленою, то які механізми підтримки узгодженості та актуальності даних будуть використані;</li>\\n<li>чи буде база даних однорідною, тобто, чи будуть всі сервери баз даних продуктами одного і того ж виробника (наприклад, всі сервери тільки Oracle). Якщо база даних не буде однорідною, то яке ПЗ буде використано для обміну даними між СУБД різних виробників (вже існуюче або розроблене спеціально як частина проекту);</li>\\n<li>чи будуть для досягнення належної продуктивності використовуватися паралельні сервери БД (наприклад, Oracle Parallel Server, DB2 UDB тощо).</li>\\n</ul>\\n<p>Етап проектування завершується розробкою технічного проекту ІС.</p>\\n<ol>\\n<li>На етапі реалізації здійснюється створення ПЗ системи, встановлення технічних засобів, розробка експлуатаційної документації.</li>\\n<li>Етап тестування зазвичай виявляється розподіленим в часі. Після завершення розробки окремого модуля системи виконують автономний тест, який переслідує таку мету:<ul>\\n<li>виявлення відмов модуля (жорстких збоїв);</li>\\n<li>відповідність модуля специфікації (наявність всіх необхідних функцій, відсутність зайвих функцій).</li>\\n</ul>\\n</li>\\n</ol>\\n<p>Після того як автономний тест успішно пройдено, модуль включають до складу розробленої частини системи і група згенерованих модулів проходить тестування зв&#39;язків, які повинні відстежити їх взаємний вплив.</p>\\n<p>Далі група модулів тестується на надійність роботи, тобто проходять\\nтести імітації відмов системи і напрацювання на відмову. Перша група тестів\\nпоказує, наскільки добре система відновлюється після збоїв ПЗ, відмов\\nапаратного забезпечення. Друга група тестів визначає ступінь стійкості\\nсистеми при штатній роботі і дозволяє оцінити час безвідмовної роботи системи. У комплект тестів стійкості повинні входити тести, які імітують пікове навантаження на систему.</p>\\n<p>Потім весь комплект модулів проходить системний тест – тест внутрішнього приймання товару, який показує рівень його якості. Сюди входять тести функціональності і надійності системи.</p>\\n<p>Останній тест ІС – приймально–здавальні випробування, який передбачає показ ІС замовникові, повинен містити групу тестів, що моделюють реальні бізнес–процеси, щоб показати відповідність реалізації вимогам замовника.\\nНеобхідність контролювати процес створення ІС, гарантувати досягнення цілей розробки і дотримання різних обмежень (бюджетних, часових тощо) привела до широкого використання у цій сфері методів і засобів програмної інженерії: структурного аналізу, об&#39;єктно–орієнтованого моделювання, CASE– систем.</p>\\n<h4 id=\\\"-48\\\">ЗАВДАННЯ ПС48</h4>\\n<h5 id=\\\"-\\\">Альтернативні топології інтеграції ІС</h5>\\n<p>Існують три альтернативні топології інтеграції: </p>\\n<ul>\\n<li>точка–точка (Point – to – Point); </li>\\n<li>шлюз (hub – and – spoke); </li>\\n<li>шина (Bus).</li>\\n</ul>\\n<p>У топології «точка–точка» усі об&#39;єкти мають прямі зв&#39;язки один з одним. Кожен зв&#39;язок можна реалізувати будь–яким способом. Варіанти реалізації залежать від вимог і характеристик взаємодії між об&#39;єктами. До недоліків топології можна віднести такі характеристики: недостатня гнучкість; складність підтримки численних з&#39;єднань «точка–точка»; зміни одного об&#39;єкту впливають на об&#39;єкти, що залишилися; логіка маршрутизації часто програмується в коді об&#39;єктів; відсутність загальної моделі безпеки; використання різних API; низька надійність; складність створення фреймворків і підтримки асинхронної взаємодії.</p>\\n<p>Для скорочення числа використовуваних інтерфейсів слід використати топологію із загальним шлюзом або топологію із загальною шиною Такі моделі інтеграції реалізуються на рівні проміжного ПЗ.</p>\\n<p>Наступним кроком в розробці інтеграційної архітектури можна вважати появу корпоративної сервісної шини (Enterprise Service Bus – ESB).\\nESB дозволяє проводити як внутрішню, так і зовнішню інтеграції, і є шиною, працюючою як слабко–зв’язна система, керована подіями. Концепції сервісно–орієнтованої архітектури (СОА) і ESB сильно пов&#39;язані. ESB підтримує принцип реалізації СОА: розділення служби подання та її реалізації.</p>\\n<p>Функції ESB: надання інтерфейсів взаємодії; відправка і маршрутизація повідомлень; перетворення даних; реакція на події; управління політиками; віртуалізація. На підставі функцій ESB можна сформувати типовий список вимог, які пред&#39;являють користувачі: велика пропускна спроможність; підтримка декількох стилів інтеграції; забезпечення можливості додаткам працювати з сервісами як безпосередньо, так і через адаптери. ESB є, по суті, логічним компонентом архітектури, що приводить інтеграційну інфраструктуру у відповідність принципу СОА. Архітектурою, побудованою за принципом ESB, складніше управляти, але вона гнучкіша і масштабована (впровадження СОА не потребує змін в усіх елементах системи, внаслідок чого зможе відбуватися поетапно). Можна подати ESB у вигляді п&#39;ятирівневої структури:</p>\\n<p>1) рівень сполучення (адаптери та інтерфейси); \\n2) транспортна підсистема;\\n3) рівень реалізації бізнес–логіки;\\n4) рівень управління бізнес–процесами;\\n5) рівень бізнес–управління.</p>\\n<h4 id=\\\"-49\\\">ЗАВДАННЯ ПС49</h4>\\n<h5 id=\\\"-\\\">Модель конкретного підприємства</h5>\\n<p>Модель конкретного підприємства можна будувати або шляхом вибору фрагментів основної або типової моделі у відповідності зі специфічними особливостями підприємства (BAAN Enterprise Modeler), або шляхом автоматизованої адаптації цих моделей в результаті експертного опитування (SAP Business Engineering Workbench). Побудована модель підприємства у вигляді мета–опису зберігається в репозиторії і при необхідності може бути відкорегована. На основі цієї моделі формується конфігурація та виконується налаштування ІС.</p>\\n<h4 id=\\\"-50\\\">ЗАВДАННЯ ПС50</h4>\\n<h5 id=\\\"-rational-rose\\\">Комплекс Rational Rose</h5>\\n<p>Rational Rose реалізує процес об&#39;єктно–орієнтованого аналізу та проектування ПЗ, описаний в RUР. В основі роботи Rational Rose лежить побудова діаграм та специфікацій UML, які визначають архітектуру системи, її статичні і динамічні аспекти. У складі Rational Rose можна виділити шість основних структурних компонентів: репозиторій, графічний інтерфейс користувача, засоби перегляду проекту (браузер), засоби контролю проекту, засоби збору статистики і генератор документів. До них додаються генератори кодів для кожної підтримуваної мови, склад яких змінюється від версії до версії.</p>\\n<p>Репозиторій є базою даних проекту, браузер забезпечує «навігацію» за проектом, включаючи переміщення по ієрархії класів і підсистем, переключення від одного виду діаграм до іншого тощо. Засоби контролю і збору статистики дають можливість знаходити та усувати помилки у міру розвитку проекту, а не після завершення його опису.\\nГенератор звітів формує тексти вихідних документів на основі інформації, яка міститься в репозиторії. Засоби автоматичної генерації коду, використовуючи інформацію, яку містять діаграми класів і компонентів, формують файли описів класів. Створюваний таким чином скелет програми можна уточнювати шляхом прямого програмування на відповідній мові. В результаті розробки проекту за допомогою Rational Rose формуються наступні документи: діаграми UML (зображують модель програмної системи, яку розробляють); специфікації класів, об&#39;єктів, атрибутів та операцій; заготовки текстів програм.</p>\\n</div>\";\n// Exports\nmodule.exports = code;\n\n//# sourceURL=webpack://test/./src/docs/course-2/semester-2/it-system-design/text.md?");

/***/ }),

/***/ "./src/common/laba-title-sheet-var-2.html":
/*!************************************************!*\
  !*** ./src/common/laba-title-sheet-var-2.html ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"<div class=\\\"title-sheet\\\">\\n  <div class=\\\"header1\\\">\\n    НАЦІОНАЛЬНИЙ ТЕХНІЧНИЙ УНІВЕРСИТЕТ УКРАЇНИ <br />\\n    «КИЇВСЬКИЙ ПОЛІТЕХНІЧНИЙ ІНСТИТУТ <br />\\n    імені ІГОРЯ СІКОРСЬКОГО»<br />\\n    Інститут прикладного системного аналізу<br />\\n    Кафедра математичних методів\\n    системного аналізу\\n  </div>\\n\\n  <div class=\\\"header2\\\">\\n    ЗВІТ <br />\\n    про виконання {{title}} роботи<br />\\n    з дисципліни «{{course}}»<br />\\n    Варіант №{{variant}}<br />\\n  </div>\\n\\n  <div class=\\\"header3\\\">\\n    Виконав:<br />\\n    Студент ІV курсу групи ІС-02<br />\\n    Бойко Василь Олександрович<br />\\n    Прийняв: <br />\\n    {{professor}}<br />\\n  </div>\\n  <div class=\\\"footer\\\">Київ 2022</div>\\n</div>\\n\\n<style>\\n  .title-sheet {\\n    font-size: 1.2rem;\\n    line-height: 2.2rem;\\n    margin: 3rem 2rem 5rem 3rem;\\n    page-break-after: always;\\n    text-align: center;\\n  }\\n\\n  .title-sheet .header1 {\\n    font-weight: 600;\\n    margin-bottom: 6rem;\\n  }\\n\\n  .title-sheet .header2 {\\n    font-weight: 600;\\n    margin-bottom: 6rem;\\n  }\\n\\n  .title-sheet .header3 {\\n    text-align: left;\\n    margin-left: 50%;\\n  }\\n\\n  .footer {\\n    margin-top: 10rem;\\n    text-align: center;\\n  }\\n</style>\");\n\n//# sourceURL=webpack://test/./src/common/laba-title-sheet-var-2.html?");

/***/ }),

/***/ "./node_modules/highlight.js/styles/github.css":
/*!*****************************************************!*\
  !*** ./node_modules/highlight.js/styles/github.css ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_cjs_js_github_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../css-loader/dist/cjs.js!./github.css */ \"./node_modules/css-loader/dist/cjs.js!./node_modules/highlight.js/styles/github.css\");\n\n            \n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_github_css__WEBPACK_IMPORTED_MODULE_1__[\"default\"], options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_github_css__WEBPACK_IMPORTED_MODULE_1__[\"default\"].locals || {});\n\n//# sourceURL=webpack://test/./node_modules/highlight.js/styles/github.css?");

/***/ }),

/***/ "./src/style.css":
/*!***********************!*\
  !*** ./src/style.css ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!./style.css */ \"./node_modules/css-loader/dist/cjs.js!./src/style.css\");\n\n            \n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_1__[\"default\"], options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_1__[\"default\"].locals || {});\n\n//# sourceURL=webpack://test/./src/style.css?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : 0;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && typeof btoa !== 'undefined') {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};\n\n//# sourceURL=webpack://test/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js?");

/***/ }),

/***/ "./src/core/index.js":
/*!***************************!*\
  !*** ./src/core/index.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"render\": () => (/* binding */ render)\n/* harmony export */ });\n/* harmony import */ var highlight_js_lib_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! highlight.js/lib/core */ \"./node_modules/highlight.js/lib/core.js\");\n/* harmony import */ var highlight_js_lib_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(highlight_js_lib_core__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var highlight_js_lib_languages_c_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! highlight.js/lib/languages/c-like */ \"./node_modules/highlight.js/lib/languages/c-like.js\");\n/* harmony import */ var highlight_js_lib_languages_c_like__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(highlight_js_lib_languages_c_like__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var highlight_js_styles_github_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! highlight.js/styles/github.css */ \"./node_modules/highlight.js/styles/github.css\");\n\n\n\n\nhighlight_js_lib_core__WEBPACK_IMPORTED_MODULE_0___default().registerLanguage(\"c\", (highlight_js_lib_languages_c_like__WEBPACK_IMPORTED_MODULE_1___default()));\n\nconst renderBlock = {\n  app: document.getElementById(\"app\"),\n\n  addTitle(block) {\n    const { title } = block;\n    if (title) {\n      const el = document.createElement(\"h2\");\n      el.classList.add(\"page-break-before\");\n      el.innerText = title;\n      this.app.appendChild(el);\n    }\n  },\n\n  render(block) {\n    try {\n      this[block.type](block.content, block.vars);\n    } catch (err) {\n      throw new Error(`Wrong type of block: ${block.type}`);\n    }\n  },\n\n  flowchart(content, vars) {\n    const diagram = flowchart.parse(content);\n    const { id } = vars;\n    const el = document.getElementById(id);\n    el.classList.add(\"flowchart\");\n    diagram.drawSVG(el);\n  },\n\n  markdown(content) {\n    const el = document.createElement(\"div\");\n    el.className = \"page-break-before\";\n    el.innerHTML = content;\n    this.app.appendChild(el);\n  },\n\n  html(content, vars) {\n    const el = document.createElement(\"div\");\n    el.innerHTML = Object.keys(vars).reduce((acc, key) => {\n      const reg = RegExp(`\\{\\{${key}\\}\\}`, \"g\");\n      return acc.replace(reg, vars[key]);\n    }, content);\n    this.app.appendChild(el);\n  },\n\n  code(content, vars) {\n    const { id } = vars;\n    const el = document.getElementById(id);\n    const escapedCode = content.replace(/\\</g, \"&lt;\").replace(/\\>/g, \"&gt;\");\n    el.innerHTML = `<pre><code class=\"c\">${escapedCode}</code></pre>`;\n  },\n\n  mermaid(content, vars) {\n    const { id } = vars;\n    const el = document.getElementById(id);\n    el.classList.add(\"mermaid\", \"align-center\");\n    el.innerHTML = content;\n  },\n};\n\nconst render = (blocks) => {\n  blocks.forEach((block) => renderBlock.render(block));\n  highlight_js_lib_core__WEBPACK_IMPORTED_MODULE_0___default().initHighlightingOnLoad();\n};\n\n\n//# sourceURL=webpack://test/./src/core/index.js?");

/***/ }),

/***/ "./src/docs/course-2/semester-2/it-system-design/index.js":
/*!****************************************************************!*\
  !*** ./src/docs/course-2/semester-2/it-system-design/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _text_md__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./text.md */ \"./src/docs/course-2/semester-2/it-system-design/text.md\");\n/* harmony import */ var _text_md__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_text_md__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/core */ \"./src/core/index.js\");\n/* harmony import */ var _common_laba_title_sheet_var_2_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/common/laba-title-sheet-var-2.html */ \"./src/common/laba-title-sheet-var-2.html\");\n/* harmony import */ var _style_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/style.css */ \"./src/style.css\");\n\n\n\n\n\nconst blocks = [\n  {\n    title: \"\",\n    type: \"html\",\n    content: _common_laba_title_sheet_var_2_html__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n    vars: {\n      labaNo: 1,\n      professor: \"доц. Коваленко А.Є.\",\n      course: \"Проектування інформаційних систем\",\n      title: \"залікової контрольної\",\n      variant: 21,\n    },\n  },\n  {\n    title: \"\",\n    type: \"markdown\",\n    content: (_text_md__WEBPACK_IMPORTED_MODULE_0___default()),\n  },\n];\n\n(0,_core__WEBPACK_IMPORTED_MODULE_1__.render)(blocks);\n\n\n//# sourceURL=webpack://test/./src/docs/course-2/semester-2/it-system-design/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/docs/course-2/semester-2/it-system-design/index.js");
/******/ 	
/******/ })()
;